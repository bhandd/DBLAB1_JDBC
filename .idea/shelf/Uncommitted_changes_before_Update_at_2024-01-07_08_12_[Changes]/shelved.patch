Index: src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage dblab1.dblab1_jdbc.model;\r\n\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\nimport dblab1.dblab1_jdbc.model.exceptions.BooksDbException;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n/**\r\n * A mock implementation of the BooksDBInterface interface to demonstrate how to\r\n * use it together with the user interface.\r\n * <p>\r\n * Your implementation must access a real database.\r\n *\r\n * @author anderslm@kth.se\r\n */\r\npublic class BooksDb implements BooksDbInterface {\r\n\r\n    private static List<Book> books;\r\n\r\n    public BooksDb() {\r\n        Connection con = getConnection.getConnection();\r\n        try {\r\n            books = getConnection.executeQuery(con, \"SELECT * FROM T_book\");\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean connect() throws Exception {\r\n        if (getConnection.StartConnection()) {\r\n            System.out.println(\"Yes\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"No\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void disconnect() throws SQLException {\r\n        getConnection.EndConnection();\r\n    }\r\n\r\n    @Override\r\n    public List<Book> searchBooksByTitle(String searchTitle) {\r\n        // mock implementation\r\n        // NB! Your implementation should select the books matching\r\n        // the search string via a query to a database (not load all books from db)\r\n        List<Book> result = new ArrayList<>();\r\n        searchTitle = searchTitle.toLowerCase();\r\n        for (Book book : books) {\r\n            if (book.getTitle().toLowerCase().contains(searchTitle)) {\r\n                result.add(book);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //TODO: kolla om vi ska ha en lista av b√∂cker eller ett bokobjekt i taget\r\n    public List<Book> searchBooks(String title, String isbn, String author, int rating, String genre){\r\n        //TODO: make SQL-queries depending on different search criteria\r\n        return null;\r\n\r\n    }\r\n    public void rateBook(int bookId, int rating) throws Exception{\r\n        //TODO: rate a book in the database\r\n    }\r\n\r\n    public void addBook(String title, String isbn, List<String> authors, String genre) throws Exception{\r\n        //TODO:  add a book to the database forst without author\r\n        // add a book to the database WITH authro(Do this one last(but before addAuthor) as it accesses about 4 tables in the database and therefore is more complicated)\r\n    }\r\n\r\n    public void addAuthor(String name) throws Exception{\r\n        //TODO: add an author to the database and at the same time update the book_author table to connect the author to the books and vice versa\r\n    }\r\n\r\n    private static final Book[] DATA = {\r\n            new Book(1, \"123456789\", \"Databases Illuminated\", 2018),//new Date(2018, 1, 1)),\r\n            new Book(2, \"234567891\", \"Dark Databases\", 1990), //new Date(1990, 1, 1)),\r\n            new Book(3, \"456789012\", \"The buried giant\", 2000), //new Date(2000, 1, 1)),\r\n            new Book(4, \"567890123\", \"Never let me go\", 2000), //new Date(2000, 1, 1)),\r\n            new Book(5, \"678901234\", \"The remains of the day\", 2000), //new Date(2000, 1, 1)),\r\n            new Book(6, \"234567890\", \"Alias Grace\", 2000), //new Date(2000, 1, 1)),\r\n            new Book(7, \"345678911\", \"The handmaids tale\", 2010), //new Date(2010, 1, 1)),\r\n            new Book(8, \"345678901\", \"Shuggie Bain\", 2020), //new Date(2020, 1, 1)),\r\n            new Book(9, \"345678912\", \"Microserfs\", 2000) //new Date(2000, 1, 1)),\r\n    };\r\n\r\n    public List<Book> getDBList() {\r\n        return books;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java b/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java
--- a/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java	(revision a45fceeba0d64b373606d729046d89807726628a)
+++ b/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java	(date 1704553302811)
@@ -51,6 +51,7 @@
         getConnection.EndConnection();
     }
 
+
     @Override
     public List<Book> searchBooksByTitle(String searchTitle) {
         // mock implementation
Index: src/main/java/dblab1/dblab1_jdbc/model/getConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.model;\r\n\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class getConnection {\r\n\r\n    private static Connection con = null;\r\n    public static boolean StartConnection() throws Exception {\r\n\r\n        String user = (\"root\");//args[0]; // user name\r\n        String pwd = (\"1234\");//args[1]; // password\r\n        System.out.println(user + \", *********\");\r\n        String database = \"Library\"; // the name of the specific database\r\n        String server\r\n                = \"jdbc:mysql://localhost:3306/\" + database\r\n                + \"?UseClientEnc=UTF8\";\r\n        try (Connection checkConnect = DriverManager.getConnection(server, user, pwd)){\r\n            con = DriverManager.getConnection(server, user, pwd);\r\n            //Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n            System.out.println(\"Connected!\");\r\n            return true;\r\n            //executeQuery(con, \"SELECT * FROM T_book\");\r\n        }  catch (SQLException e) {\r\n            System.err.println(\"Connection failed. Error message: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static void EndConnection() throws SQLException {\r\n        con.close();\r\n        System.out.println(\"Connection closed.\");\r\n    }\r\n\r\n\r\n    public static List<Book> executeQuery(Connection con, String query) throws SQLException {\r\n        List<Book> books = new ArrayList<>();\r\n        try (Statement stmt = con.createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n\r\n            // Get the attribute names\r\n            ResultSetMetaData metaData = rs.getMetaData();\r\n            int ccount = metaData.getColumnCount();\r\n            for (int c = 1; c <= ccount; c++) {\r\n                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n            }\r\n            System.out.println();\r\n\r\n            // Get the attribute values\r\n            while (rs.next()) {\r\n                int bookId = rs.getInt(\"book_id\");\r\n                String title = rs.getString(\"title\");\r\n                String author = rs.getString(\"author\");\r\n                String ISBN = rs.getString(\"ISBN\");\r\n                int year = rs.getInt(\"year\");\r\n\r\n                Book book = new Book(bookId, ISBN, title, year);\r\n                books.add(book);\r\n            }\r\n            System.out.println();\r\n        }\r\n        return books;\r\n    }\r\n\r\n    public static List<Book> searchSelected(Connection con, String query) throws SQLException {\r\n        List<Book> books = new ArrayList<>();\r\n        try (Statement stmt = con.createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n\r\n            // Get the attribute names\r\n            ResultSetMetaData metaData = rs.getMetaData();\r\n            int ccount = metaData.getColumnCount();\r\n            for (int c = 1; c <= ccount; c++) {\r\n                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n            }\r\n            System.out.println();\r\n\r\n            // Get the attribute values\r\n            while (rs.next()) {\r\n                int bookId = rs.getInt(\"book_id\");\r\n                String title = rs.getString(\"title\");\r\n                String author = rs.getString(\"author\");\r\n                String ISBN = rs.getString(\"ISBN\");\r\n                int year = rs.getInt(\"year\");\r\n\r\n                Book book = new Book(bookId, ISBN, title, year);\r\n                books.add(book);\r\n            }\r\n            System.out.println();\r\n        }\r\n        return books;\r\n    }\r\n    public static Connection getConnection() {\r\n        return con;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java b/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java
--- a/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java	(revision a45fceeba0d64b373606d729046d89807726628a)
+++ b/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java	(date 1704553425879)
@@ -11,8 +11,8 @@
     private static Connection con = null;
     public static boolean StartConnection() throws Exception {
 
-        String user = ("root");//args[0]; // user name
-        String pwd = ("1234");//args[1]; // password
+        String user = ("app_user");//args[0]; // user name
+        String pwd = ("spion");//args[1]; // password
         System.out.println(user + ", *********");
         String database = "Library"; // the name of the specific database
         String server
Index: src/main/java/dblab1/dblab1_jdbc/view/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.view;\r\n\r\n//import se.kth.anderslm.booksdb.model.Book;\r\n//import se.kth.anderslm.booksdb.model.BooksDbInterface;\r\n//import se.kth.anderslm.booksdb.model.SearchMode;\r\n\r\nimport dblab1.dblab1_jdbc.model.*;\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\nimport dblab1.dblab1_jdbc.model.exceptions.BooksDbException;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static javafx.scene.control.Alert.AlertType.*;\r\n\r\n/**\r\n * The controller is responsible for handling user requests and update the view\r\n * (and in some cases the model).\r\n *\r\n * @author anderslm@kth.se\r\n */\r\npublic class Controller {\r\n\r\n    private final BooksPaneView booksView; // view\r\n    private final BooksDbInterface booksDb; // model\r\n\r\n    public Controller(BooksDbInterface booksDb, BooksPaneView booksView) {\r\n        this.booksDb = booksDb;\r\n        this.booksView = booksView;\r\n    }\r\n\r\n    protected void onSearchSelected(String searchFor, SearchMode mode) {\r\n        try {\r\n            if (searchFor != null && searchFor.length() > 1) {\r\n                List<Book> result = new ArrayList<>();\r\n                switch (mode) {\r\n                    case Title:\r\n                        result = booksDb.searchBooksByTitle(searchFor);\r\n                        break;\r\n                    case ISBN:\r\n                        // ...\r\n                        break;\r\n                    case Author:\r\n                        // ...\r\n                        break;\r\n                    default:\r\n                        result= new ArrayList<>();\r\n                }\r\n                if (result == null || result.isEmpty()) {\r\n                    booksView.showAlertAndWait(\r\n                            \"No results found.\", INFORMATION);\r\n                } else {\r\n                    booksView.displayBooks(result);\r\n                }\r\n            } else {\r\n                booksView.showAlertAndWait(\r\n                        \"Enter a search string!\", WARNING);\r\n            }\r\n        } catch (Exception e) {\r\n            booksView.showAlertAndWait(\"Database error.\",ERROR);\r\n        }\r\n    }\r\n\r\n\r\n    public EventHandler<ActionEvent> connectHandler = new EventHandler<ActionEvent>() {\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            BooksDbInterface booksDbInterface = new BooksDb();\r\n            try {\r\n                booksDbInterface.connect();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    public static void executeQuery(java.sql.Connection con, String query, List<Book> books) throws SQLException {\r\n\r\n        try (Statement stmt = con.createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n\r\n            // Get the attribute names\r\n            ResultSetMetaData metaData = rs.getMetaData();\r\n            int ccount = metaData.getColumnCount();\r\n            for (int c = 1; c <= ccount; c++) {\r\n                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n            }\r\n            System.out.println();\r\n\r\n            // Get the attribute values\r\n            while (rs.next()) {\r\n                int bookId = rs.getInt(\"book_id\");\r\n                String title = rs.getString(\"title\");\r\n                String author = rs.getString(\"author\");\r\n                String ISBN = rs.getString(\"ISBN\");\r\n                int year = rs.getInt(\"year\");\r\n\r\n                Book book = new Book(bookId, ISBN, title, year);\r\n                books.add(book);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n    public EventHandler<ActionEvent> addBooksDB = new EventHandler<ActionEvent>() {\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            Connection con = getConnection.getConnection();\r\n\r\n            //List<Book> books = new ArrayList<>();\r\n            try {\r\n                List<Book> booksDb = getConnection.executeQuery(con, \"SELECT * FROM T_book\");\r\n                booksView.displayBooks((List<Book>) booksDb);\r\n\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    };\r\n\r\n    public EventHandler<ActionEvent> endConnectHandler = new EventHandler<ActionEvent>() {\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            BooksDbInterface booksDbInterface = new BooksDb();\r\n            try {\r\n                booksDbInterface.disconnect();\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    };\r\n\r\n    public EventHandler<ActionEvent> printDB = new EventHandler<ActionEvent>() {\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            List<Book> books = booksDb.getDBList();\r\n            for (int i = 0;i < books.size();i++) {\r\n                System.out.println(books.get(i));\r\n            }\r\n        }\r\n    };\r\n    // TODO:\r\n    // Add methods for all types of user interaction (e.g. via  menus).\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/view/Controller.java b/src/main/java/dblab1/dblab1_jdbc/view/Controller.java
--- a/src/main/java/dblab1/dblab1_jdbc/view/Controller.java	(revision a45fceeba0d64b373606d729046d89807726628a)
+++ b/src/main/java/dblab1/dblab1_jdbc/view/Controller.java	(date 1704554459200)
@@ -38,7 +38,7 @@
                 List<Book> result = new ArrayList<>();
                 switch (mode) {
                     case Title:
-                        result = booksDb.searchBooksByTitle(searchFor);
+                       // result = booksDb.searchBooksByTitle(searchFor);
                         break;
                     case ISBN:
                         // ...
@@ -115,6 +115,22 @@
             try {
                 List<Book> booksDb = getConnection.executeQuery(con, "SELECT * FROM T_book");
                 booksView.displayBooks((List<Book>) booksDb);
+
+            } catch (SQLException e) {
+                throw new RuntimeException(e);
+            }
+        }
+    };
+
+    public EventHandler<ActionEvent> searchDB = new EventHandler<ActionEvent>() {
+        @Override
+        public void handle(ActionEvent actionEvent) {
+            Connection con = getConnection.getConnection();
+
+            //List<Book> books = new ArrayList<>();
+            try {
+                List<Book> booksDb = getConnection.executeQuery(con, "SELECT * FROM T_book where title='matte'");
+                booksView.displayBooks((List<Book>) booksDb);
 
             } catch (SQLException e) {
                 throw new RuntimeException(e);
Index: src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.view;\r\n\r\nimport java.sql.Date;\r\nimport java.util.List;\r\n\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\nimport dblab1.dblab1_jdbc.model.BooksDb;\r\nimport dblab1.dblab1_jdbc.model.SearchMode;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.layout.Priority;\r\nimport javafx.scene.layout.VBox;\r\n//import se.kth.anderslm.booksdb.model.Book;\r\n//import se.kth.anderslm.booksdb.model.BooksDbMockImpl;\r\n//import se.kth.anderslm.booksdb.model.SearchMode;\r\n\r\n\r\n/**\r\n * The main pane for the view, extending VBox and including the menus. An\r\n * internal BorderPane holds the TableView for books and a search utility.\r\n *\r\n * @author anderslm@kth.se\r\n */\r\npublic class BooksPaneView extends VBox {\r\n\r\n    private TableView<Book> booksTable;\r\n    private ObservableList<Book> booksInTable; // the data backing the table view\r\n\r\n    private ComboBox<SearchMode> searchModeBox;\r\n    private TextField searchField;\r\n    private Button searchButton;\r\n\r\n    private MenuBar menuBar;\r\n\r\n    private List<Book> books;\r\n\r\n    public BooksPaneView(BooksDb booksDb) {\r\n        final Controller controller = new Controller(booksDb, this);\r\n        this.init(controller);\r\n    }\r\n\r\n    /**\r\n     * Display a new set of books, e.g. from a database select, in the\r\n     * booksTable table view.\r\n     *\r\n     *\r\n     */\r\n    public void displayBooks(List<Book> books) {\r\n        booksInTable.clear();\r\n        booksInTable.addAll(books);\r\n    }\r\n    \r\n    /**\r\n     * Notify user on input error or exceptions.\r\n     * \r\n     * @param msg the message\r\n     * @param type types: INFORMATION, WARNING et c.\r\n     */\r\n    protected void showAlertAndWait(String msg, Alert.AlertType type) {\r\n        // types: INFORMATION, WARNING et c.\r\n        Alert alert = new Alert(type, msg);\r\n        alert.showAndWait();\r\n    }\r\n\r\n\r\n    //TODO: kolla vilka metoder som g√•r att flytta till model\r\n    private void init(Controller controller) {\r\n\r\n        booksInTable = FXCollections.observableArrayList();\r\n\r\n        // init views and event handlers\r\n        initBooksTable();\r\n        initSearchView(controller);\r\n        initMenus(controller);\r\n\r\n        FlowPane bottomPane = new FlowPane();\r\n        bottomPane.setHgap(10);\r\n        bottomPane.setPadding(new Insets(10, 10, 10, 10));\r\n        bottomPane.getChildren().addAll(searchModeBox, searchField, searchButton);\r\n\r\n        BorderPane mainPane = new BorderPane();\r\n        mainPane.setCenter(booksTable);\r\n        mainPane.setBottom(bottomPane);\r\n        mainPane.setPadding(new Insets(10, 10, 10, 10));\r\n\r\n        this.getChildren().addAll(menuBar, mainPane);\r\n        VBox.setVgrow(mainPane, Priority.ALWAYS);\r\n    }\r\n\r\n    private void initBooksTable() {\r\n        booksTable = new TableView<>();\r\n        booksTable.setEditable(false); // don't allow user updates (yet)\r\n        booksTable.setPlaceholder(new Label(\"No rows to display\"));\r\n\r\n        // define columns\r\n        TableColumn<Book, String> titleCol = new TableColumn<>(\"Title\");\r\n        TableColumn<Book, String> isbnCol = new TableColumn<>(\"ISBN\");\r\n        TableColumn<Book, Date> publishedCol = new TableColumn<>(\"Published\");\r\n        booksTable.getColumns().addAll(titleCol, isbnCol, publishedCol);\r\n        // give title column some extra space\r\n        titleCol.prefWidthProperty().bind(booksTable.widthProperty().multiply(0.5));\r\n\r\n        // define how to fill data for each cell, \r\n        // get values from Book properties\r\n        titleCol.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\r\n        isbnCol.setCellValueFactory(new PropertyValueFactory<>(\"isbn\"));\r\n        publishedCol.setCellValueFactory(new PropertyValueFactory<>(\"published\"));\r\n        \r\n        // associate the table view with the data\r\n        booksTable.setItems(booksInTable);\r\n    }\r\n\r\n    private void initSearchView(Controller controller) {\r\n        searchField = new TextField();\r\n        searchField.setPromptText(\"Search for...\");\r\n        searchModeBox = new ComboBox<>();\r\n        searchModeBox.getItems().addAll(SearchMode.values());\r\n        searchModeBox.setValue(SearchMode.Title);\r\n        searchButton = new Button(\"Search\");\r\n        \r\n        // event handling (dispatch to controller)\r\n        searchButton.setOnAction(new EventHandler<ActionEvent>() {\r\n            @Override\r\n            public void handle(ActionEvent event) {\r\n                String searchFor = searchField.getText();\r\n                SearchMode mode = searchModeBox.getValue();\r\n                controller.onSearchSelected(searchFor, mode);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initMenus(Controller controller) {\r\n\r\n        Menu fileMenu = new Menu(\"File\");\r\n        MenuItem exitItem = new MenuItem(\"Exit\");\r\n        MenuItem connectItem = new MenuItem(\"Connect to Db\");\r\n        connectItem.addEventHandler(ActionEvent.ACTION, controller.connectHandler);\r\n        MenuItem disconnectItem = new MenuItem(\"Disconnect\");\r\n        disconnectItem.addEventHandler(ActionEvent.ACTION, controller.endConnectHandler);\r\n        MenuItem addBoks = new MenuItem(\"Add books\");\r\n        addBoks.addEventHandler(ActionEvent.ACTION, controller.addBooksDB);\r\n        fileMenu.getItems().addAll(exitItem, connectItem, disconnectItem, addBoks);\r\n\r\n        Menu searchMenu = new Menu(\"Search\");\r\n        MenuItem titleItem = new MenuItem(\"Title\");\r\n        MenuItem isbnItem = new MenuItem(\"ISBN\");\r\n        MenuItem authorItem = new MenuItem(\"Author\");\r\n        MenuItem printAllItem = new MenuItem(\"PrintAll\");\r\n        printAllItem.addEventHandler(ActionEvent.ACTION, controller.printDB);\r\n        searchMenu.getItems().addAll(titleItem, isbnItem, authorItem, printAllItem);\r\n\r\n        Menu manageMenu = new Menu(\"Manage\");\r\n        MenuItem addItem = new MenuItem(\"Add\");\r\n        MenuItem removeItem = new MenuItem(\"Remove\");\r\n        MenuItem updateItem = new MenuItem(\"Update\");\r\n        manageMenu.getItems().addAll(addItem, removeItem, updateItem);\r\n\r\n        menuBar = new MenuBar();\r\n        menuBar.getMenus().addAll(fileMenu, searchMenu, manageMenu);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java b/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java
--- a/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java	(revision a45fceeba0d64b373606d729046d89807726628a)
+++ b/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java	(date 1704553305764)
@@ -144,7 +144,7 @@
         connectItem.addEventHandler(ActionEvent.ACTION, controller.connectHandler);
         MenuItem disconnectItem = new MenuItem("Disconnect");
         disconnectItem.addEventHandler(ActionEvent.ACTION, controller.endConnectHandler);
-        MenuItem addBoks = new MenuItem("Add books");
+        MenuItem addBoks = new MenuItem("Get all books"); //TODO: check name of MenuItem
         addBoks.addEventHandler(ActionEvent.ACTION, controller.addBooksDB);
         fileMenu.getItems().addAll(exitItem, connectItem, disconnectItem, addBoks);
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9d7239cd-08d7-4e6b-8966-b7b7055103ea\" name=\"Changes\" comment=\"Added getConnection, modified BooksDbMockImpl, Controller and BooksPane\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaFXApplication\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2a5YJOLu3Yi0gFNB5YN81gmPA5j\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Datalab_driver/mysql-connector-j-8.2.0/mysql-connector-j-8.2.0.jar&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;mysql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\√•r 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\view\" />\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\√•r 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\model\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\√•r 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\model\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"DialogExampleMain\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.model.Dialog.DialogExampleMain\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.model.exceptions.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"JDBCTest\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.model.JDBCTest\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"app_user spion\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.model.exceptions.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.Main\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"app_user spion\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.JDBCTest\" />\r\n        <item itemvalue=\"Application.DialogExampleMain\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9d7239cd-08d7-4e6b-8966-b7b7055103ea\" name=\"Changes\" comment=\"\" />\r\n      <created>1703609834744</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1703609834744</updated>\r\n      <workItem from=\"1704028395929\" duration=\"12000\" />\r\n      <workItem from=\"1704028435708\" duration=\"31000\" />\r\n      <workItem from=\"1704028478658\" duration=\"21000\" />\r\n      <workItem from=\"1704029608039\" duration=\"152000\" />\r\n      <workItem from=\"1704050590694\" duration=\"21000\" />\r\n      <workItem from=\"1704278936904\" duration=\"646000\" />\r\n      <workItem from=\"1704405707457\" duration=\"3000\" />\r\n      <workItem from=\"1704411538506\" duration=\"10777000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"uppladdning av projekt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703610552121</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703610552121</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"JDBC driver\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703671224594</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703671224594</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Updated with GUI from AndersLm\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703675116944</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703675116944</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"added packages. Added classes; Author, review. changed name of BooksDbMockImpl to BooksDb\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704526212217</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704526212217</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"uppladdning av projekt\" />\r\n    <MESSAGE value=\"JDBC driver\" />\r\n    <MESSAGE value=\"Updated with GUI from AndersLm\" />\r\n    <MESSAGE value=\"added packages. Added classes; Author, review. changed name of BooksDbMockImpl to BooksDb\" />\r\n    <MESSAGE value=\"Added getConnection, modified BooksDbMockImpl, Controller and BooksPane\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added getConnection, modified BooksDbMockImpl, Controller and BooksPane\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/Main.java</url>\r\n          <line>46</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a45fceeba0d64b373606d729046d89807726628a)
+++ b/.idea/workspace.xml	(date 1704554459544)
@@ -5,10 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="9d7239cd-08d7-4e6b-8966-b7b7055103ea" name="Changes" comment="Added getConnection, modified BooksDbMockImpl, Controller and BooksPane">
+      <change afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/entityClasses/DbUsers.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/Main.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/Controller.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
Index: src/main/java/dblab1/dblab1_jdbc/model/entityClasses/DbUsers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/model/entityClasses/DbUsers.java b/src/main/java/dblab1/dblab1_jdbc/model/entityClasses/DbUsers.java
new file mode 100644
--- /dev/null	(date 1704553308056)
+++ b/src/main/java/dblab1/dblab1_jdbc/model/entityClasses/DbUsers.java	(date 1704553308056)
@@ -0,0 +1,8 @@
+package dblab1.dblab1_jdbc.model.entityClasses;
+/** Just in case, delete if not used
+ *
+ * */
+public class DbUsers {
+
+
+}
