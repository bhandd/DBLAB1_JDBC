Index: src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage dblab1.dblab1_jdbc.model;\r\n\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\nimport dblab1.dblab1_jdbc.model.exceptions.BooksDbException;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * A mock implementation of the BooksDBInterface interface to demonstrate how to\r\n * use it together with the user interface.\r\n * <p>\r\n * Your implementation must access a real database.\r\n *\r\n * @author anderslm@kth.se\r\n */\r\npublic class BooksDb implements BooksDbInterface {\r\n\r\n    private final List<Book> books;\r\n\r\n    public BooksDb() {\r\n\r\n        books = List.of();\r\n    }\r\n\r\n\r\n    public static boolean connect() throws Exception {\r\n        if (getConnection.StartConnection() != null) {\r\n            System.out.println(\"Yes\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"No\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static Connection shareConnection() {\r\n        try{\r\n            return getConnection.getConnection();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n    public void disconnect() throws BooksDbException, SQLException {\r\n        getConnection.EndConnection();\r\n    }\r\n//TODO: sparas ifall den behövs sen.\r\n\r\n    //Added by Anders\r\n//    @Override\r\n//    public List<Book> searchBooksByTitle(String searchTitle)\r\n//            throws BooksDbException {\r\n//        // mock implementation\r\n//        // NB! Your implementation should select the books matching\r\n//        // the search string via a query to a database (not load all books from db)\r\n//        List<Book> result = new ArrayList<>();\r\n//        searchTitle = searchTitle.toLowerCase();\r\n//        for (Book book : books) {\r\n//            if (book.getTitle().toLowerCase().contains(searchTitle)) {\r\n//                result.add(book);\r\n//            }\r\n//        }\r\n//        //spara i books<-SQL-fråga till databas\r\n//      //  result.add(books);\r\n//        return result;\r\n//    }\r\n\r\n\r\n    public static void executeQuery(/*java.sql.Connection con,*/ String query, List<Book> books) throws SQLException {\r\n\r\n      //  Connection con = getConnection.getConnection();\r\n        try (Statement stmt = getConnection.getConnection().createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n\r\n            // Get the attribute names\r\n            ResultSetMetaData metaData = rs.getMetaData();\r\n            int ccount = metaData.getColumnCount();\r\n            for (int c = 1; c <= ccount; c++) {\r\n                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n            }\r\n            System.out.println();\r\n\r\n            // Get the attribute values\r\n            while (rs.next()) {\r\n\r\n                int bookId = rs.getInt(\"book_id\");\r\n                String ISBN = rs.getString(\"ISBN\");\r\n                String title = rs.getString(\"title\");\r\n/*\r\n                Author author = new Author();\r\n                author.setfName(rs.getString(\"author\"));\r\n*/\r\n                String author = rs.getString(\"fullName\");\r\n                //String author = rs.getString(\"author\");\r\n                Date published = rs.getDate(\"published\");\r\n                //   int pages = rs.getInt(\"pages\");\r\n                //  String language = rs.getString(\"language\");\r\n                String genre = rs.getString(\"genre\");\r\n                int grade = rs.getInt(\"grade\");\r\n                Book book = new Book(bookId, ISBN, title,author, published, genre, grade);\r\n                System.out.println(book.toString());\r\n                books.add(book);\r\n\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    public static List<Book> searchDBBook(String query) {\r\n        List<Book> result = new ArrayList<>();\r\n\r\n       // Connection con = getConnection.getConnection();\r\n        try (Statement stmt = getConnection.getConnection().createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n            while (rs.next()) {\r\n                int bookId = rs.getInt(\"book_id\");\r\n                String ISBN = rs.getString(\"ISBN\");\r\n                String title = rs.getString(\"title\");\r\n/*\r\n                Author author = new Author();\r\n                author.setfName(rs.getString(\"author\"));\r\n*/\r\n                String author = rs.getString(\"fullName\");\r\n                //String author = rs.getString(\"author\");\r\n                Date published = rs.getDate(\"published\");\r\n                //   int pages = rs.getInt(\"pages\");\r\n                //  String language = rs.getString(\"language\");\r\n                String genre = rs.getString(\"genre\");\r\n                int grade = rs.getInt(\"grade\");\r\n                Book book = new Book(bookId, ISBN, title,author, published, genre, grade);\r\n                System.out.println(book.toString());\r\n                result.add(book);\r\n                System.out.println(book.toString());\r\n                System.out.println(\"Yes\");\r\n                // } else System.out.println(\"No\");\r\n            }\r\n            rs.close();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n\r\n    //TODO: kan användas för att skapa ett objekt för alla variabler och returnera?\r\n    public static int getErrorCount(String query) throws SQLException {\r\nint errorCount = 0;\r\n        try (Statement stmt = getConnection.getConnection().createStatement()) {\r\n            System.out.println(\"current query to execute: \" + query);\r\n            // Execute the SQL statement\r\n\r\n            ResultSet rs = stmt.executeQuery(query);\r\n\r\n            //  Get the attribute names\r\n            ResultSetMetaData metaData = rs.getMetaData();\r\n            int ccount = metaData.getColumnCount();\r\n            for (int c = 1; c <= ccount; c++) {\r\n                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n            }\r\n            System.out.println();\r\n//TODO: move the while loop in executeQuery, searchBookDB and this one to it´s own method?\r\n            // Get the attribute values\r\n          //  while (rs.next()) {\r\n                //  int bookId = rs.getInt(\"book_id\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                String title = rs.getString(\"title\");\r\n///*\r\n//                Author author = new Author();\r\n//                author.setfName(rs.getString(\"author\"));\r\n//*/\r\n//                String author = rs.getString(\"Author\");\r\n//                //String author = rs.getString(\"author\");\r\n//                Date published = rs.getDate(\"year\");\r\n//                //   int pages = rs.getInt(\"pages\");\r\n//                //  String language = rs.getString(\"language\");\r\n//                int genre_id = rs.getInt(\"genre_id\");\r\n//                int grade = rs.getInt(\"grade\");\r\n                rs.next();\r\n                errorCount = rs.getInt(\"@@error_count\");\r\n        //    }\r\n            System.out.println(\"executed a query\");\r\n        }catch (SQLException e){\r\n            System.err.println(\"FUCK! Something went to shit again! \"+ e.getMessage());\r\n        }\r\nreturn  errorCount;\r\n    }\r\n\r\n    public static void executeStatement(String statement) throws SQLException {\r\n        System.out.println(\"current statement to execute: \" +statement);\r\n\r\n        try (Statement stmt = getConnection.getConnection().createStatement()) {\r\n            // Execute the SQL statement\r\n            stmt.executeUpdate(statement);\r\n            //   ResultSet rs = stmt.executeQuery(statement);\r\n\r\n            // Get the attribute names\r\n//            ResultSetMetaData metaData = rs.getMetaData();\r\n//            int ccount = metaData.getColumnCount();\r\n//            for (int c = 1; c <= ccount; c++) {\r\n//                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n//            }\r\n//            System.out.println();\r\n////TODO: move the while loop in executeQuery, searchBookDB and this one to it´s own method\r\n//            // Get the attribute values\r\n//            while (rs.next()) {\r\n//\r\n//                int bookId = rs.getInt(\"book_id\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                String title = rs.getString(\"title\");\r\n///*\r\n//                Author author = new Author();\r\n//                author.setfName(rs.getString(\"author\"));\r\n//*/\r\n//                String author = rs.getString(\"Author\");\r\n//                //String author = rs.getString(\"author\");\r\n//                Date published = rs.getDate(\"year\");\r\n//                //   int pages = rs.getInt(\"pages\");\r\n//                //  String language = rs.getString(\"language\");\r\n//                int genre_id = rs.getInt(\"genre_id\");\r\n//                int grade = rs.getInt(\"grade\");\r\n//                Book book = new Book(bookId, ISBN, title,author, published, genre_id, grade);\r\n//                System.out.println(book.toString());\r\n            //  books.add(book);\r\n\r\n            //  }\r\n\r\n            System.out.println(\"executed a statement\");\r\n        }catch (SQLException e){\r\n            System.err.println(\"FUCK! Something failed again! \"+ e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the grade for a book with the specified title.\r\n     *\r\n     * @param grade The new grade for the book.\r\n     * @param title The title of the book to update.\r\n     */\r\n    public static void updateGrade(int grade, String title) {\r\n        var sql = \"UPDATE T_book \"\r\n                + \"SET grade = ? \"\r\n                + \"WHERE title = ?\";\r\n    //    Connection conn = getConnection.getConnection();\r\n        try (var stmt = getConnection.getConnection().prepareStatement(sql)) {\r\n\r\n            // prepare data for update\r\n//            stmt.setString(1, title);\r\n//            stmt.setInt(2, grade);\r\n            stmt.setString(2, title);\r\n            stmt.setInt(1, grade);\r\n\r\n            // execute the update\r\n            int rowAffected = stmt.executeUpdate();\r\n            System.out.println(\"Row affected \" + rowAffected);\r\n        } catch (SQLException ex) {\r\n            System.err.println(ex.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void deleteBook(String title) throws SQLException {\r\n//        try(Statement stmt = getConnection.getConnection().createStatement()){\r\n//            // Execute the SQL statement\r\n//            ResultSet rs = stmt.executeQuery(\"SELECT MAX(book_id) AS currentBookID, MAX(aut_id) AS currentAuthorID\\n\" +\r\n//                    \"FROM T_book\\n\" +\r\n//                    \"LEFT JOIN T_author\\n\" +\r\n//                    \"ON book_id = aut_id;;\");\r\n//            ResultSetMetaData metaData = rs.getMetaData();\r\n//            int ccount = metaData.getColumnCount();\r\n//            for (int c = 1; c <= ccount; c++) {\r\n//                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n//            }\r\n//            System.out.println();\r\n//            rs.next();\r\n//            int currentBook_id = rs.getInt(\"currentBookID\") + 1;\r\n//            int currentAut_id = rs.getInt(\"currentAuthorID\") + 1;\r\n//        System.out.println(\"bokID: \"+ currentBook_id +\"AutID: \" + currentAut_id);\r\n\r\n            getConnection.getConnection().setAutoCommit(false);\r\n//\r\n//            if (!authorExists(fullName)) {\r\n//                executeStatement(\"INSERT INTO T_Author (fullName) VALUES ( '\" + fullName + \"');\");\r\n//                System.out.println(\"Author\" + fullName + \"added!\");\r\n//            }\r\n            executeStatement(\"DELETE FROM book_author WHERE book_id IN (SELECT book_id FROM T_book WHERE title = '\" + title + \"');\");\r\n        System.out.println(\"Deleted in book_author\");\r\n            //gör både lägg till T_book och lägg till book_id, aut_id i book_autho\r\n            executeStatement(\"DELETE FROM T_book WHERE title = '\"+ title + \"' and book_id <> 0;\");\r\n        System.out.println(\"wtf! This is incredible!\");\r\n\r\n            // Kontrollera om det finns några fel\r\n            int errorCount = getConnection.getConnection().getTransactionIsolation();\r\n       int realErrorCount = getErrorCount(\" SELECT @@error_count;\");\r\n        System.out.println(\"Real error count: \" + realErrorCount);\r\n        System.out.println(\"Dont know what error count this is?: \" + errorCount);\r\n\r\n            if (realErrorCount != 0) {\r\n                // Gör en rollback\r\n                getConnection.getConnection().rollback();\r\n                  getConnection.getConnection().setAutoCommit(true);\r\n            } else {\r\n                // Gör en commit\r\n                //getConnection.getConnection().commit();\r\n                executeStatement(\"commit;\");\r\n                  getConnection.getConnection().setAutoCommit(true);\r\n                System.out.println(\"Changes commited to database\");\r\n            }\r\n//    }catch(SQLException e){\r\n//    System.out.println(\"Ett fel inträffade i addBook: \" + e.getMessage());\r\n//    }\r\n}\r\n\r\n\r\n//\r\n    public static void addBook(String isbn, String title, String genre, String fullName) throws SQLException {\r\n        try(Statement stmt = getConnection.getConnection().createStatement()){\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(\"SELECT MAX(book_id) AS currentBookID, MAX(aut_id) AS currentAuthorID\\n\" +\r\n                    \"FROM T_book\\n\" +\r\n                    \"LEFT JOIN T_author\\n\" +\r\n                    \"ON book_id = aut_id;;\");\r\n\r\n            ResultSetMetaData metaData = rs.getMetaData();\r\n            int ccount = metaData.getColumnCount();\r\n            for (int c = 1; c <= ccount; c++) {\r\n                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n            }\r\n            System.out.println();\r\n            rs.next();\r\n            int currentBook_id = rs.getInt(\"currentBookID\") + 1;\r\n            int currentAut_id = rs.getInt(\"currentAuthorID\") + 1;\r\n            System.out.println(\"bokID: \"+ currentBook_id +\"AutID: \" + currentAut_id);\r\n//            executeStatement(\"START TRANSACTION;\");\r\n            getConnection.getConnection().setAutoCommit(false);\r\n\r\n            if (!authorExists(fullName)) {\r\n                executeStatement(\"INSERT INTO T_Author (fullName) VALUES ( '\" + fullName + \"');\");\r\n                System.out.println(\"Author\" + fullName + \"added!\");\r\n            }\r\n            executeStatement(\"INSERT INTO T_book (isbn, title, genre) VALUES ('\" + isbn + \"' ,'\" + title + \"' ,'\" + genre + \" ' );\");\r\n            System.out.println(\"added\" + isbn +\",\"+ title+ \",\"+ genre + \"To book\");\r\n            //gör både lägg till T_book och lägg till book_id, aut_id i book_autho\r\n            executeStatement(\"INSERT INTO book_author (book_id, author_id) VALUES (\" + currentBook_id  + \",\"  + currentAut_id + \" );\");\r\n            System.out.println(\"wtf! This is incredible!\");\r\n\r\n            // Kontrollera om det finns några fel\r\n            int errorCount = getConnection.getConnection().getTransactionIsolation();\r\n            int realErrorCount = getErrorCount(\" SELECT @@error_count;\");\r\n            System.out.println(\"Real error count: \" + realErrorCount);\r\n            System.out.println(\"Dont know what error count this is?: \" + errorCount);\r\n\r\n            if (realErrorCount != 0) {\r\n                // Gör en rollback\r\n                getConnection.getConnection().rollback();\r\n                getConnection.getConnection().setAutoCommit(true);\r\n            } else {\r\n                // Gör en commit\r\n                //getConnection.getConnection().commit();\r\n                executeStatement(\"commit;\");\r\n                getConnection.getConnection().setAutoCommit(true);\r\n                System.out.println(\"Changes commited to database\");\r\n            }\r\n        }catch(SQLException e){\r\n            System.out.println(\"Ett fel inträffade i addBook: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    //TODO: borde gå att köra denna med prepared statements om man redigerar den\r\n    // se SQL-statements i metoden ovan\r\n\r\n    /**\r\n     *\r\n     *\r\n     * */\r\n    public static void addBook1(String isbn, String title, String genre, String fullName) throws SQLException {\r\n        var sql2 = \"INSERT INTO T_book (isbn, title, genre) VALUES (?, ?, ?)\";\r\n        var sql1 = \"INSERT INTO T_Author (fullName) VALUES (?)\";\r\n        var sql3 = \"INSERT INTO book_author (book_id, author_id) VALUES ((SELECT book_id FROM t_book WHERE title = ' (?) ',(SELECT aut_id FROM t_author WHERE fullname = ' (?) '))\";\r\n        getConnection.getConnection().setAutoCommit(false); //TODO: lite osäker på om det är ok att sätta den här\r\n        if (!authorExists(fullName)) {\r\n\r\n            try (var stmt = getConnection.getConnection().prepareStatement(sql1)) {\r\n                // Skapa författaren\r\n                stmt.setString(1, fullName);\r\n                stmt.executeUpdate();\r\n                int rowAffected = stmt.executeUpdate();\r\n                System.out.println(\"Row affected \" + rowAffected);\r\n            } catch (SQLException ex) {\r\n                System.err.println(ex.getMessage());\r\n            }\r\n        }\r\n\r\n\r\n        //gör både lägg till T_book och lägg till book_id, aut_id i book_author\r\n    try(var stmt2 = getConnection.getConnection().prepareStatement(sql2);) {\r\n        // Lägg till boken\r\n        stmt2.setString(1, isbn);\r\n        stmt2.setString(2, title);\r\n        stmt2.setString(3, genre);\r\n        stmt2.executeUpdate();\r\n\r\n    }\r\n        try(var stmt3 = getConnection.getConnection().prepareStatement(sql3);) {\r\n            // Lägg till boken\r\n            stmt3.setString(1, isbn);\r\n            stmt3.setString(2, title);\r\n            stmt3.executeUpdate();\r\n        }\r\n\r\n    //lägg till book_id och aut_id i book_author\r\n//   var stmt3 = getConnection.getConnection().prepareStatement(sql3);\r\n//    stmt3.setString(1, title);\r\n//    stmt3.setString(2, fullName);\r\n//    stmt3.executeUpdate();\r\n//    int rowAffected = stmt2.executeUpdate();\r\n//    System.out.println(\"Row affected \" + rowAffected);\r\n\r\n    // Kontrollera om det finns några fel\r\n    int errorCount = getConnection.getConnection().getTransactionIsolation();\r\n    if (errorCount != 0) {\r\n        // Gör en rollback\r\n        getConnection.getConnection().rollback();\r\n        getConnection.getConnection().setAutoCommit(true);\r\n    } else {\r\n        // Gör en commit\r\n        getConnection.getConnection().commit();\r\n        getConnection.getConnection().setAutoCommit(true);\r\n    }\r\n\r\n//}catch(SQLException e){\r\n//    System.out.println(\"Ett fel inträffade i addBook: \" + e.getMessage());\r\n//}\r\n}\r\n    /**används för att kolla om en author existerar i T_book\r\n     * används av metoden addBookToDB\r\n     *\r\n     *\r\n     * */\r\npublic static boolean authorExists(String author){\r\n        //TODO: använd en author här istället för en String?\r\n    String query = \"SELECT COUNT(*) FROM T_author WHERE fullName ='\" + author + \"'\";\r\n    Connection con = getConnection.getConnection();\r\n    try (Statement stmt = con.createStatement()) {\r\n        // Execute the SQL statement\r\n        ResultSet rs = stmt.executeQuery(query);\r\n        rs.next();\r\n        int count = rs.getInt(1);\r\n        if (count > 0){\r\n            System.out.println(author + \" exists in DB!\");\r\n            return true;\r\n        }\r\n    } catch (SQLException e) {\r\n        System.err.println(e.getMessage());\r\n    }\r\n   System.out.println(author + \" does not exist in DB!\");\r\n    return false;\r\n}\r\n\r\n\r\n\r\n//TODO: spara tills vidare, försök att använda ett preparedStatement,\r\n// vilket ska förhindra SQL-injection\r\n    public static boolean checkIfAuthorExist(String author) {\r\n        var sql = \"SELECT * FROM T_book WHERE author = ?\";\r\n\r\n\r\n            // prepare data for update\r\n//            stmt.setString(1, title);\r\n//            stmt.setInt(2, grade);\r\n\r\n        try (var con = getConnection.getConnection();\r\n             var stmt = con.prepareStatement(sql)) {\r\n            stmt.setString(1, author);\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(sql);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count > 0){\r\n                System.out.println(author + \" exists in DB!\");\r\n                return true;\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n        System.out.println(author + \" does not exist in DB!\");\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java b/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java
--- a/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java	(revision 5284f5daa0d16b8f69386259c39823ac716f683b)
+++ b/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java	(date 1705252783373)
@@ -160,36 +160,18 @@
         try (Statement stmt = getConnection.getConnection().createStatement()) {
             System.out.println("current query to execute: " + query);
             // Execute the SQL statement
-
             ResultSet rs = stmt.executeQuery(query);
-
-            //  Get the attribute names
+            //  Get the attribute names//TODO: BEHÖVS?
             ResultSetMetaData metaData = rs.getMetaData();
             int ccount = metaData.getColumnCount();
             for (int c = 1; c <= ccount; c++) {
                 System.out.print(metaData.getColumnName(c) + "\t");
             }
             System.out.println();
-//TODO: move the while loop in executeQuery, searchBookDB and this one to it´s own method?
-            // Get the attribute values
-          //  while (rs.next()) {
-                //  int bookId = rs.getInt("book_id");
-//                String ISBN = rs.getString("ISBN");
-//                String title = rs.getString("title");
-///*
-//                Author author = new Author();
-//                author.setfName(rs.getString("author"));
-//*/
-//                String author = rs.getString("Author");
-//                //String author = rs.getString("author");
-//                Date published = rs.getDate("year");
-//                //   int pages = rs.getInt("pages");
-//                //  String language = rs.getString("language");
-//                int genre_id = rs.getInt("genre_id");
-//                int grade = rs.getInt("grade");
+
                 rs.next();
                 errorCount = rs.getInt("@@error_count");
-        //    }
+
             System.out.println("executed a query");
         }catch (SQLException e){
             System.err.println("FUCK! Something went to shit again! "+ e.getMessage());
Index: src/main/java/dblab1/dblab1_jdbc/model/getConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.model;\r\n\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Author;\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n//TODO: should this be accessed trough the BooksDbInterface?\r\npublic class getConnection {\r\n\r\n    private static Connection con = null;\r\n    public static Connection StartConnection() throws Exception {\r\n        String user = (\"root\");//args[0]; // user name\r\n        String pwd = (\"1234\");//args[1]; // password\r\n        System.out.println(user + \", *********\");\r\n        String database = \"Library\"; // the name of the specific database\r\n        String server\r\n                = \"jdbc:mysql://localhost:3306/\" + database\r\n                + \"?UseClientEnc=UTF8\";\r\n        try (Connection checkConnect = DriverManager.getConnection(server, user, pwd)){\r\n            con = DriverManager.getConnection(server, user, pwd);\r\n            //Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n            System.out.println(\"Connected!\");\r\n            return con;\r\n            //executeQuery(con, \"SELECT * FROM T_book\");\r\n        }  catch (SQLException e) {\r\n            System.err.println(\"Connection failed. Error message: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static void EndConnection() throws SQLException {\r\n        con.close();\r\n        System.out.println(\"Connection closed.\");\r\n    }\r\n\r\n    //TODO: Remove later\r\n    //\r\n\r\n//    public static void executeQuery(java.sql.Connection con, String query, List<Book> books) throws SQLException {\r\n//\r\n//        try (Statement stmt = con.createStatement()) {\r\n//            // Execute the SQL statement\r\n//            ResultSet rs = stmt.executeQuery(query);\r\n//\r\n//            // Get the attribute names\r\n//            ResultSetMetaData metaData = rs.getMetaData();\r\n//            int ccount = metaData.getColumnCount();\r\n//            for (int c = 1; c <= ccount; c++) {\r\n//                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n//            }\r\n//            System.out.println();\r\n//\r\n//            // Get the attribute values\r\n//            while (rs.next()) {\r\n//              //  int bookId = rs.getInt(\"book_id\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                String title = rs.getString(\"title\");\r\n//                /*\r\n//                Author author = new Author();\r\n//                author.setfName(rs.getString(\"author\"));\r\n//                */\r\n////                int year = rs.getInt(\"year\");\r\n////                int grade = rs.getInt(\"grade\");\r\n////                int pages = rs.getInt(\"pages\");\r\n//               // String language = rs.getString(\"language\");\r\n////                int genreId = rs.getInt(\"genre id\");\r\n//\r\n//                Book book = new Book(/*bookId,*/ ISBN, title);\r\n//                books.add(book);\r\n//            }\r\n//            System.out.println();\r\n//        }\r\n//    }\r\n\r\n    //TODO: Remove later\r\n\r\n//    public static List<Book> searchBookDB( String query) {\r\n//        List<Book> result = new ArrayList<>();\r\n//\r\n//        Connection con = getConnection.getConnection();\r\n//        try (Statement stmt = con.createStatement()) {\r\n//            // Execute the SQL statement\r\n//            ResultSet rs = stmt.executeQuery(query);\r\n//            while (rs.next()) {\r\n//                //  int bookId = rs.getInt(\"book_id\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                String title = rs.getString(\"title\");\r\n//                /*\r\n//                Author author = new Author();\r\n//                author.setfName(rs.getString(\"author\"));\r\n//                */\r\n////                int year = rs.getInt(\"year\");\r\n////                int grade = rs.getInt(\"grade\");\r\n////                int pages = rs.getInt(\"pages\");\r\n//                // String language = rs.getString(\"language\");\r\n////                int genreId = rs.getInt(\"genre id\");\r\n//                int yearDB = rs.getInt(\"year\");\r\n//\r\n//\r\n////                titleDB = titleDB.toLowerCase();\r\n////                if (titleDB.toLowerCase().contains(title)) {\r\n//                Book book = new Book(/*bookId,*/ ISBN, title); result.add(book);\r\n//                System.out.println(\"Yes\");\r\n//                // } else System.out.println(\"No\");\r\n//            }\r\n//        } catch (SQLException e) {\r\n//            throw new RuntimeException(e);\r\n//        }\r\n//        return result;\r\n//    }\r\n\r\n\r\n    //TODO: Temporary copy of searchBookDb, delete if not needed\r\n/*\r\n    public static List<Book> searchBookDB( String query) {\r\n        List<Book> result = new ArrayList<>();\r\n\r\n        Connection con = getConnection.getConnection();\r\n        try (Statement stmt = con.createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n            while (rs.next()) {\r\n                int bookIdDB = rs.getInt(\"book_id\");\r\n                String titleDB = rs.getString(\"title\");\r\n                Author authorDB = new Author();\r\n                authorDB.setfName(rs.getString(\"author\"));\r\n                String ISBNDB = rs.getString(\"ISBN\");\r\n                int yearDB = rs.getInt(\"year\");\r\n\r\n//                titleDB = titleDB.toLowerCase();\r\n//                if (titleDB.toLowerCase().contains(title)) {\r\n                Book book = new Book(bookIdDB, ISBNDB, titleDB, authorDB, yearDB);\r\n                result.add(book);\r\n                System.out.println(\"Yes\");\r\n                // } else System.out.println(\"No\");\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return result;\r\n    }\r\n\r\n */\r\n    public static Connection getConnection() {\r\n        return con;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java b/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java
--- a/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java	(revision 5284f5daa0d16b8f69386259c39823ac716f683b)
+++ b/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java	(date 1705252124169)
@@ -12,8 +12,8 @@
 
     private static Connection con = null;
     public static Connection StartConnection() throws Exception {
-        String user = ("root");//args[0]; // user name
-        String pwd = ("1234");//args[1]; // password
+        String user = ("app_user");//args[0]; // user name
+        String pwd = ("spion");//args[1]; // password
         System.out.println(user + ", *********");
         String database = "Library"; // the name of the specific database
         String server
Index: src/main/java/dblab1/dblab1_jdbc/view/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.view;\r\n\r\n//import se.kth.anderslm.booksdb.model.Book;\r\n//import se.kth.anderslm.booksdb.model.BooksDbInterface;\r\n//import se.kth.anderslm.booksdb.model.SearchMode;\r\n\r\nimport dblab1.dblab1_jdbc.model.*;\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\nimport dblab1.dblab1_jdbc.model.exceptions.BooksDbException;\r\nimport javafx.concurrent.Task;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static javafx.scene.control.Alert.AlertType.*;\r\n\r\n/**\r\n * The controller is responsible for handling user requests and update the view\r\n * (and in some cases the model).\r\n *\r\n * @author anderslm@kth.se\r\n */\r\npublic class Controller {\r\n\r\n    private BooksPaneView booksView; // view\r\n    private BooksDbInterface booksDb; // model\r\n\r\n    public Controller(BooksDbInterface booksDb, BooksPaneView booksView) {\r\n        this.booksDb = booksDb;\r\n        this.booksView = booksView;\r\n    }\r\n\r\n    protected void onSearchSelected(String searchFor, SearchMode mode) {\r\n        String searchTitle = (\"SELECT b.book_id, b.isbn,  b.title, a.fullName, b.published, b.genre, b.grade\\n\" +\r\n                \"FROM T_book b \\n\" +\r\n                \"INNER JOIN book_author ba \\n\" +\r\n                \"ON b.book_id = ba.book_id \\n\" +\r\n                \"INNER JOIN T_author a \\n\" +\r\n                \"ON ba.author_id = a.aut_id WHERE b.title LIKE '%\" + searchFor + \"%';\");\r\n\r\nString searchISBN = (\"SELECT b.book_id, b.isbn,  b.title, a.fullName, b.published, b.genre, b.grade\\n\" +\r\n                \"FROM T_book b \\n\" +\r\n                \"INNER JOIN book_author ba \\n\" +\r\n                \"ON b.book_id = ba.book_id \\n\" +\r\n                \"INNER JOIN T_author a \\n\" +\r\n                \"ON ba.author_id = a.aut_id WHERE b.isbn LIKE '%\" + searchFor + \"%';\");\r\n\r\nString searchAuthor = (\"SELECT b.book_id, b.isbn,  b.title, a.fullName, b.published, b.genre, b.grade\\n\" +\r\n                \"FROM T_book b \\n\" +\r\n                \"INNER JOIN book_author ba \\n\" +\r\n                \"ON b.book_id = ba.book_id \\n\" +\r\n                \"INNER JOIN T_author a \\n\" +\r\n                \"ON ba.author_id = a.aut_id WHERE a.fullName LIKE '%\" + searchFor + \"%';\");\r\n        try {\r\n            if (searchFor != null && searchFor.length() > 1) {\r\n                List<Book> result = new ArrayList<>();\r\n                switch (mode) {\r\n                    case Title:\r\n\r\n                        // result = booksDb.searchBooksByTitleDB(searchFor);\r\n                        result = BooksDb.searchDBBook(searchTitle);\r\n\r\n                        break;\r\n                    case ISBN:\r\n                        result = BooksDb.searchDBBook(searchISBN);\r\n\r\n                        break;\r\n                    case Author:\r\n                        result = BooksDb.searchDBBook(searchAuthor);\r\n\r\n                        break;\r\n                    default:\r\n                        result = new ArrayList<>();\r\n                }\r\n                if (result == null || result.isEmpty()) {\r\n                    booksView.showAlertAndWait(\r\n                            \"No results found.\", INFORMATION);\r\n                } else {\r\n                    booksView.displayBooks(result);\r\n                }\r\n            } else {\r\n                booksView.showAlertAndWait(\r\n                        \"Enter a search string!\", WARNING);\r\n            }\r\n        } catch (Exception e) {\r\n            booksView.showAlertAndWait(\"Database error.\", ERROR);\r\n        }\r\n    }\r\n\r\n\r\n    public EventHandler<ActionEvent> connectHandler = new EventHandler<ActionEvent>() {\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            try {\r\n                BooksDbInterface.connect();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    };\r\n\r\n//TODO: commented out for now. Already in getConnection. Should probably be moved to BooksDb\r\n\r\n//    public static void executeQuery(java.sql.Connection con, String query, List<Book> books) throws SQLException {\r\n//\r\n//        try (Statement stmt = con.createStatement()) {\r\n//            // Execute the SQL statement\r\n//            ResultSet rs = stmt.executeQuery(query);\r\n//\r\n//            // Get the attribute names\r\n//            ResultSetMetaData metaData = rs.getMetaData();\r\n//            int ccount = metaData.getColumnCount();\r\n//            for (int c = 1; c <= ccount; c++) {\r\n//                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n//            }\r\n//            System.out.println();\r\n//\r\n//            // Get the attribute values\r\n//            while (rs.next()) {\r\n//                int bookId = rs.getInt(\"book_id\");\r\n//                String title = rs.getString(\"title\");\r\n//                String author = rs.getString(\"author\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                int year = rs.getInt(\"year\");\r\n//\r\n//                Book book = new Book(bookId, ISBN, title, year);\r\n//                books.add(book);\r\n//            }\r\n//            System.out.println();\r\n//        }\r\n//    }\r\n\r\n        public EventHandler<ActionEvent> showBooksInDB = new EventHandler<ActionEvent>() {\r\n            @Override\r\n            public void handle(ActionEvent actionEvent) {\r\n                //TODO:try to make methods to retrieve the connection and the books\r\n                String query = (\"SELECT b.book_id, b.isbn, b.title, a.fullName, b.published, b.genre, b.grade\\n\" +\r\n                        \"FROM T_book b INNER JOIN book_author ba ON b.book_id = ba.book_id INNER JOIN T_author a ON ba.author_id = a.aut_id;\");\r\n                // Connection con = getConnection.getConnection();\r\n                List<Book> books = new ArrayList<>();\r\n\r\n                try {\r\n                    //  getConnection.executeQuery(con, \"SELECT * FROM T_book\", books);\r\n                    // BooksDb.executeQuery(/*con,*/ \"SELECT * FROM T_book\", books); //original\r\n                    BooksDb.executeQuery(/*con,*/query, books);\r\n                    // getConnection.searchBookDB(\"SELECT * FROM T_book\"); //TODO: investigate if this is possible in some way\r\n//                BooksDb.checkIfAuthorExists(\"Johan Larsson\");\r\n                    booksView.displayBooks(books);\r\n\r\n                } catch (SQLException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n        };\r\n\r\n        public EventHandler<ActionEvent> addBookDB = new EventHandler<ActionEvent>() {\r\n            Alert alert = new Alert(CONFIRMATION);\r\n\r\n            String isbn = null;\r\n            String title = null;\r\n\r\n            String author = null;\r\n\r\n            String published = null;\r\n\r\n            String grade = null;\r\n\r\n            private TextField titleField = new TextField();\r\n\r\n            private TextField isbnFiled = new TextField();\r\n\r\n            private TextField authorFiled = new TextField();\r\n\r\n            private TextField publishedFiled = new TextField();\r\n\r\n            private TextField gradeField = new TextField();\r\n\r\n            @Override\r\n            public void handle(ActionEvent actionEvent) {\r\n                //TODO:try to make methods to retrieve the connection and the books\r\n\r\n                // Connection con = getConnection.getConnection();\r\n                List<Book> books = new ArrayList<>();\r\n                try {\r\n                    alert.setTitle(\"Add book\");\r\n                    alert.setResizable(false);\r\n\r\n                    GridPane grid = new GridPane();\r\n                    grid.setAlignment(Pos.CENTER);\r\n                    grid.setHgap(5);\r\n                    grid.setVgap(5);\r\n                    grid.setPadding(new Insets(10, 10, 10, 10));\r\n                    grid.add(new Label(\"Isbn for book \"), 1, 1);\r\n                    grid.add(isbnFiled, 2, 1);\r\n                    grid.add(new Label(\"Enter title of book \"), 1, 2);\r\n                    grid.add(titleField, 2, 2);\r\n                    grid.add(new Label(\"Author that wrote book \"), 1, 3);\r\n                    grid.add(authorFiled, 2, 3);\r\n//                grid.add(new Label(\"New grade \"), 1, 4);\r\n//                grid.add(, 4, 4);\r\n//                grid.add(new Label(\"New grade \"), 1, 5);\r\n//                grid.add(, 5, 5); // Todo add when all attributes of book has been added to addBookToDb\r\n                    //  getConnection.executeQuery(con, \"SELECT * FROM T_book\", books);\r\n                    //   BooksDb.executeQuery(/*con,*/ \"SELECT * FROM T_book\", books);\r\n                    // getConnection.searchBookDB(\"SELECT * FROM T_book\"); //TODO: investigate if this is possible in some way\r\n                    //      BooksDb.checkIfAuthorExists(\"Johan Larss\");\r\n                    //   booksView.displayBooks(books);\r\n                    alert.getDialogPane().setContent(grid);\r\n                    alert.showAndWait();\r\n\r\n                    isbn = isbnFiled.getText();\r\n                    title = titleField.getText();\r\n                    //genre = titleField.getText();\r\n                    author = authorFiled.getText();\r\n                    String genre = \"Funny\";\r\n                    //published = publishedFiled.getText();\r\n                    //grade = gradeField.getText();\r\n                    Task<Void> task = new Task<Void>() {\r\n                        @Override\r\n                        protected Void call() throws Exception {\r\n                            BooksDb.addBook(isbn, title, genre, author);\r\n                            return null;\r\n                        }\r\n                    };\r\n\r\n                    task.setOnSucceeded(event -> {\r\n                        isbnFiled.setText(\"\");\r\n                        titleField.setText(\"\");\r\n                        authorFiled.setText(\"\");\r\n                        publishedFiled.setText(\"\");\r\n                        gradeField.setText(\"\");\r\n                    });\r\n\r\n                    new Thread(task).start();\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Ett fel inträffade i handle addBookDB: \" + e.getMessage());\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n\r\n        public EventHandler<ActionEvent> updateBookDB = new EventHandler<ActionEvent>() {\r\n            // String gradeValue = \"2\";\r\n            Alert alert = new Alert(CONFIRMATION);\r\n            String gradeValue = null;\r\n            String title = \"mattebok\";\r\n\r\n            private TextField titleField = new TextField();\r\n            private TextField gradeField = new TextField();\r\n\r\n            @Override\r\n            public void handle(ActionEvent actionEvent) {\r\n                alert.setTitle(\"Set new grade\");\r\n                alert.setResizable(false);\r\n\r\n                GridPane grid = new GridPane();\r\n                grid.setAlignment(Pos.CENTER);\r\n                grid.setHgap(5);\r\n                grid.setVgap(5);\r\n                grid.setPadding(new Insets(10, 10, 10, 10));\r\n                grid.add(new Label(\"Title for book \"), 1, 1);\r\n                grid.add(titleField, 2, 1);\r\n                grid.add(new Label(\"New grade \"), 1, 2);\r\n                grid.add(gradeField, 2, 2);\r\n\r\n                alert.getDialogPane().setContent(grid);\r\n                alert.showAndWait();\r\n                title = titleField.getText();\r\n                gradeValue = gradeField.getText();\r\n\r\n                BooksDb.updateGrade(Integer.parseInt(gradeValue), String.valueOf(title));\r\n\r\n                titleField.setText(\"\");\r\n                gradeField.setText(\"\");\r\n            }\r\n        };\r\n\r\n\r\n\r\n        public EventHandler<ActionEvent> endConnectHandler = new EventHandler<ActionEvent>() {\r\n            @Override\r\n            public void handle(ActionEvent actionEvent) {\r\n                try {\r\n                    BooksDbInterface.disconnect();\r\n                } catch (SQLException | BooksDbException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n        };\r\n        // TODO:\r\n        // Add methods for all types of user interaction (e.g. via  menus).\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/view/Controller.java b/src/main/java/dblab1/dblab1_jdbc/view/Controller.java
--- a/src/main/java/dblab1/dblab1_jdbc/view/Controller.java	(revision 5284f5daa0d16b8f69386259c39823ac716f683b)
+++ b/src/main/java/dblab1/dblab1_jdbc/view/Controller.java	(date 1705252783385)
@@ -77,6 +77,9 @@
                     case Author:
                         result = BooksDb.searchDBBook(searchAuthor);
 
+                        break;
+                    case DELETE:
+                        BooksDb.deleteBook(searchFor);
                         break;
                     default:
                         result = new ArrayList<>();
Index: src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.view;\r\n\r\nimport java.sql.Date;\r\nimport java.util.List;\r\n\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\nimport dblab1.dblab1_jdbc.model.BooksDb;\r\nimport dblab1.dblab1_jdbc.model.SearchMode;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.layout.Priority;\r\nimport javafx.scene.layout.VBox;\r\n//import se.kth.anderslm.booksdb.model.Book;\r\n//import se.kth.anderslm.booksdb.model.BooksDbMockImpl;\r\n//import se.kth.anderslm.booksdb.model.SearchMode;\r\n\r\n\r\n/**\r\n * The main pane for the view, extending VBox and including the menus. An\r\n * internal BorderPane holds the TableView for books and a search utility.\r\n *\r\n * @author anderslm@kth.se\r\n */\r\npublic class BooksPaneView extends VBox {\r\n\r\n    private TableView<Book> booksTable;\r\n    private ObservableList<Book> booksInTable; // the data backing the table view\r\n\r\n    private ComboBox<SearchMode> searchModeBox;\r\n    private TextField searchField;\r\n    private Button searchButton;\r\n\r\n    private MenuBar menuBar;\r\n\r\n    private List<Book> books;\r\n\r\n    public BooksPaneView(BooksDb booksDb) {\r\n        final Controller controller = new Controller(booksDb, this);\r\n        this.init(controller);\r\n    }\r\n\r\n    /**\r\n     * Display a new set of books, e.g. from a database select, in the\r\n     * booksTable table view.\r\n     *\r\n     *\r\n     */\r\n    public void displayBooks(List<Book> books) {\r\n        booksInTable.clear();\r\n        booksInTable.addAll(books);\r\n    }\r\n    \r\n    /**\r\n     * Notify user on input error or exceptions.\r\n     * \r\n     * @param msg the message\r\n     * @param type types: INFORMATION, WARNING et c.\r\n     */\r\n    protected void showAlertAndWait(String msg, Alert.AlertType type) {\r\n        // types: INFORMATION, WARNING et c.\r\n        Alert alert = new Alert(type, msg);\r\n        alert.showAndWait();\r\n    }\r\n\r\n\r\n    //TODO: kolla vilka metoder som går att flytta till model\r\n    private void init(Controller controller) {\r\n\r\n        booksInTable = FXCollections.observableArrayList();\r\n\r\n        // init views and event handlers\r\n        initBooksTable();\r\n        initSearchView(controller);\r\n        initMenus(controller);\r\n\r\n        FlowPane bottomPane = new FlowPane();\r\n        bottomPane.setHgap(10);\r\n        bottomPane.setPadding(new Insets(10, 10, 10, 10));\r\n        bottomPane.getChildren().addAll(searchModeBox, searchField, searchButton);\r\n\r\n        BorderPane mainPane = new BorderPane();\r\n        mainPane.setCenter(booksTable);\r\n        mainPane.setBottom(bottomPane);\r\n        mainPane.setPadding(new Insets(10, 10, 10, 10));\r\n\r\n        this.getChildren().addAll(menuBar, mainPane);\r\n        VBox.setVgrow(mainPane, Priority.ALWAYS);\r\n    }\r\n\r\n    private void initBooksTable() {\r\n        booksTable = new TableView<>();\r\n        booksTable.setEditable(false); // don't allow user updates (yet)\r\n        booksTable.setPlaceholder(new Label(\"No rows to display\"));\r\n\r\n        // define columns\r\n        TableColumn<Book, Integer> idCol = new TableColumn<>(\"Book ID\");\r\n        TableColumn<Book, String> isbnCol = new TableColumn<>(\"ISBN\");\r\n        TableColumn<Book, String> titleCol = new TableColumn<>(\"Title\");\r\n        //   TableColumn<Book, List<Author>> authorCol = new TableColumn<>(\"Author\"); //more than 1 author\r\n        TableColumn<Book, String> authorCol = new TableColumn<>(\"Author\"); //one author\r\n        TableColumn<Book, Date> publishedCol = new TableColumn<>(\"Published\");\r\n        TableColumn<Book, String> genreCol = new TableColumn<>(\"Genre\");\r\n        TableColumn<Book, Integer> gradeCol = new TableColumn<>(\"Grade\");\r\n        //  TableColumn<Book, Integer> pagesCol = new TableColumn<>(\"Pages\");\r\n        //  TableColumn<Book, String> languageCol = new TableColumn<>(\"Language\");\r\n\r\n        //TODO: add idCol, authorCol and gradeCol,,publishedCol , languageCol, genreCol(pages col can probably be omitted\r\n        booksTable.getColumns().addAll(idCol, isbnCol, authorCol, titleCol, publishedCol, genreCol, gradeCol );\r\n        // give title column some extra space\r\n        titleCol.prefWidthProperty().bind(booksTable.widthProperty().multiply(0.5));\r\n\r\n        // define how to fill data for each cell,\r\n        // get values from Book properties\r\n        idCol.setCellValueFactory(new PropertyValueFactory<>(\"bookId\"));\r\n        isbnCol.setCellValueFactory(new PropertyValueFactory<>(\"isbn\"));\r\n        titleCol.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\r\n        //  authorCol.setCellValueFactory(new PropertyValueFactory<>(\"authors\")); //more than 1 author\r\n        authorCol.setCellValueFactory(new PropertyValueFactory<>(\"author\")); //one author\r\n        publishedCol.setCellValueFactory(new PropertyValueFactory<>(\"published\"));\r\n        genreCol.setCellValueFactory(new PropertyValueFactory<>(\"genre\"));\r\n\r\n        //   pagesCol.setCellValueFactory(new PropertyValueFactory<>(\"pages\"));\r\n        // languageCol.setCellValueFactory(new PropertyValueFactory<>(\"language\"));\r\n        gradeCol.setCellValueFactory(new PropertyValueFactory<>(\"grade\"));\r\n        // associate the table view with the data\r\n        booksTable.setItems(booksInTable);\r\n    }\r\n\r\n    private void initSearchView(Controller controller) {\r\n        searchField = new TextField();\r\n        searchField.setPromptText(\"Search for...\");\r\n        searchModeBox = new ComboBox<>();\r\n        searchModeBox.getItems().addAll(SearchMode.values());\r\n        searchModeBox.setValue(SearchMode.Title);\r\n        searchButton = new Button(\"Search\");\r\n        \r\n        // event handling (dispatch to controller)\r\n        searchButton.setOnAction(new EventHandler<ActionEvent>() {\r\n            @Override\r\n            public void handle(ActionEvent event) {\r\n                String searchFor = searchField.getText();\r\n                SearchMode mode = searchModeBox.getValue();\r\n                controller.onSearchSelected(searchFor, mode);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initMenus(Controller controller) {\r\n\r\n        Menu fileMenu = new Menu(\"File\");\r\n        MenuItem exitItem = new MenuItem(\"Exit\");\r\n        MenuItem connectItem = new MenuItem(\"Connect to Db\");\r\n        connectItem.addEventHandler(ActionEvent.ACTION, controller.connectHandler);\r\n        MenuItem disconnectItem = new MenuItem(\"Disconnect\");\r\n        disconnectItem.addEventHandler(ActionEvent.ACTION, controller.endConnectHandler);\r\n        MenuItem addBoks = new MenuItem(\"Get books\");\r\n        addBoks.addEventHandler(ActionEvent.ACTION, controller.showBooksInDB);\r\n        fileMenu.getItems().addAll(exitItem, connectItem, disconnectItem, addBoks);\r\n\r\n        Menu searchMenu = new Menu(\"Search\");\r\n        MenuItem titleItem = new MenuItem(\"Title\");\r\n        MenuItem isbnItem = new MenuItem(\"ISBN\");\r\n        MenuItem authorItem = new MenuItem(\"Author\");\r\n        searchMenu.getItems().addAll(titleItem, isbnItem, authorItem);\r\n\r\n        Menu manageMenu = new Menu(\"Manage\");\r\n        MenuItem addItem = new MenuItem(\"Add\");\r\n        addItem.addEventHandler(ActionEvent.ACTION, controller.addBookDB);\r\n        MenuItem removeItem = new MenuItem(\"Remove\");\r\n        MenuItem updateItem = new MenuItem(\"Update\");\r\n        updateItem.addEventHandler(ActionEvent.ACTION, controller.updateBookDB);\r\n        manageMenu.getItems().addAll(addItem, removeItem, updateItem);\r\n        menuBar = new MenuBar();\r\n        menuBar.getMenus().addAll(fileMenu, searchMenu, manageMenu);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java b/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java
--- a/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java	(revision 5284f5daa0d16b8f69386259c39823ac716f683b)
+++ b/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java	(date 1705252783397)
@@ -174,6 +174,7 @@
         MenuItem addItem = new MenuItem("Add");
         addItem.addEventHandler(ActionEvent.ACTION, controller.addBookDB);
         MenuItem removeItem = new MenuItem("Remove");
+
         MenuItem updateItem = new MenuItem("Update");
         updateItem.addEventHandler(ActionEvent.ACTION, controller.updateBookDB);
         manageMenu.getItems().addAll(addItem, removeItem, updateItem);
Index: src/main/java/dblab1/dblab1_jdbc/model/SearchMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.model;\r\n\r\npublic enum SearchMode {\r\n    Title, ISBN, Author,\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/model/SearchMode.java b/src/main/java/dblab1/dblab1_jdbc/model/SearchMode.java
--- a/src/main/java/dblab1/dblab1_jdbc/model/SearchMode.java	(revision 5284f5daa0d16b8f69386259c39823ac716f683b)
+++ b/src/main/java/dblab1/dblab1_jdbc/model/SearchMode.java	(date 1705252783359)
@@ -1,5 +1,5 @@
 package dblab1.dblab1_jdbc.model;
 
 public enum SearchMode {
-    Title, ISBN, Author,
+    Title, ISBN, Author,DELETE
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9d7239cd-08d7-4e6b-8966-b7b7055103ea\" name=\"Changes\" comment=\"onSearchSelected search for ISBN and Author\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/Controller.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaFXApplication\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"Enum\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"alternativeSearchMethod\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2a5YJOLu3Yi0gFNB5YN81gmPA5j\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;attempted-executeQuery-update&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Datalab_driver/mysql-connector-j-8.2.0/mysql-connector-j-8.2.0.jar&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;mysql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\år 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\view\" />\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\år 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\model\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\år 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\model\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"dblab1.dblab1_jdbc.view\" />\r\n      <recent name=\"dblab1.dblab1_jdbc.model.entityClasses\" />\r\n      <recent name=\"dblab1.dblab1_jdbc.model.exceptions\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"DialogExampleMain\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.model.Dialog.DialogExampleMain\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.model.exceptions.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"JDBCTest\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.model.JDBCTest\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"app_user spion\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.model.exceptions.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.Main\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"app_user spion\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.DialogExampleMain\" />\r\n        <item itemvalue=\"Application.JDBCTest\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.JDBCTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9d7239cd-08d7-4e6b-8966-b7b7055103ea\" name=\"Changes\" comment=\"\" />\r\n      <created>1703609834744</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1703609834744</updated>\r\n      <workItem from=\"1704028395929\" duration=\"12000\" />\r\n      <workItem from=\"1704028435708\" duration=\"31000\" />\r\n      <workItem from=\"1704028478658\" duration=\"21000\" />\r\n      <workItem from=\"1704029608039\" duration=\"152000\" />\r\n      <workItem from=\"1704050590694\" duration=\"21000\" />\r\n      <workItem from=\"1704278936904\" duration=\"646000\" />\r\n      <workItem from=\"1704405707457\" duration=\"3000\" />\r\n      <workItem from=\"1704411538506\" duration=\"6058000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"uppladdning av projekt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703610552121</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703610552121</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"JDBC driver\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703671224594</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703671224594</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Updated with GUI from AndersLm\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703675116944</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703675116944</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"added packages. Added classes; Author, review. changed name of BooksDbMockImpl to BooksDb\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704526212217</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704526212217</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"search method version2\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704612357857</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704612357857</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Search for title, ISBN and author\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704612971433</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704612971433</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"added arraylist authors in Book\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704618876131</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704618876131</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Search method updated, (skipped the searchBooksByTitle--method in BooksDb),and working but get error messages. Maybe something with the connection. need to update the view methods for the book to display more book-info.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704704677582</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704704677582</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"moved executeQuery and searchBookDB-methods from getConnection to BooksDb. The methods are commented out in getConnection\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704793290044</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704793290044</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Author implemented in view, search for author possible. Author changed to a String -&gt; 1 book - 1 Author\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704886470985</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704886470985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"method updateGrade created. But needs a dialogue-view. Values can be modified in eventhandler Controller.updateBookDB. uses the prepareStatement-method from the java Connection-class\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704964755331</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704964755331</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"addBookToDB and checkIfAuthorExists added. No Dialog implemented yet. test checkIfAuthorExists with add in the menu\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704996818125</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704996818125</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Added alert to Set new grade\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705007837302</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705007837302</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Added alert to Set new grade\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705007965150</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705007965150</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"updated searchBookDb and executeQuery with JOIN. Changes to the database:&#10;&#10;T_book:&#10;Delete author&#10;genre_id (change to)-&gt; genre\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705133108926</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705133108926</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"updated searchBookDb and executeQuery with JOIN. Changes to the database:&#10;&#10;T_book:&#10;Delete author&#10;genre_id (change to)-&gt; genre\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705142592027</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705142592027</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"just a save of the addBook-method. Changes made to: controller handle addbookDB; added string genre, BooksDB; changed int genre = rs.getInt(...) to String genre = rs.getString.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705163409846</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705163409846</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"addBook fungerar nästan, bara problem med prepared statements\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705164338416</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705164338416</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"addBook ändringar gjorda men fortfarande fel\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705169376932</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705169376932</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"addBook, trying to get currentBookID och currentAuthorID\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705189589741</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705189589741</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"addbook still not working. something wrong when trying to commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705194312388</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705194312388</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"onSearchSelected search for ISBN and Author\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705243582804</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705243582804</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"23\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"uppladdning av projekt\" />\r\n    <MESSAGE value=\"JDBC driver\" />\r\n    <MESSAGE value=\"Updated with GUI from AndersLm\" />\r\n    <MESSAGE value=\"added packages. Added classes; Author, review. changed name of BooksDbMockImpl to BooksDb\" />\r\n    <MESSAGE value=\"search method version2\" />\r\n    <MESSAGE value=\"Search for title, ISBN and author\" />\r\n    <MESSAGE value=\"added arraylist authors in Book\" />\r\n    <MESSAGE value=\"Search method updated, (skipped the searchBooksByTitle--method in BooksDb),and working but get error messages. Maybe something with the connection. need to update the view methods for the book to display more book-info.\" />\r\n    <MESSAGE value=\"moved executeQuery and searchBookDB-methods from getConnection to BooksDb. The methods are commented out in getConnection\" />\r\n    <MESSAGE value=\"Author implemented in view, search for author possible. Author changed to a String -&gt; 1 book - 1 Author\" />\r\n    <MESSAGE value=\"method updateGrade created. But needs a dialogue-view. Values can be modified in eventhandler Controller.updateBookDB. uses the prepareStatement-method from the java Connection-class\" />\r\n    <MESSAGE value=\"addBookToDB and checkIfAuthorExists added. No Dialog implemented yet. test checkIfAuthorExists with add in the menu\" />\r\n    <MESSAGE value=\"Added alert to Set new grade\" />\r\n    <MESSAGE value=\"updated searchBookDb and executeQuery with JOIN. Changes to the database:&#10;&#10;T_book:&#10;Delete author&#10;genre_id (change to)-&gt; genre\" />\r\n    <MESSAGE value=\"just a save of the addBook-method. Changes made to: controller handle addbookDB; added string genre, BooksDB; changed int genre = rs.getInt(...) to String genre = rs.getString.\" />\r\n    <MESSAGE value=\"addBook fungerar nästan, bara problem med prepared statements\" />\r\n    <MESSAGE value=\"addBook ändringar gjorda men fortfarande fel\" />\r\n    <MESSAGE value=\"addBook, trying to get currentBookID och currentAuthorID\" />\r\n    <MESSAGE value=\"addbook still not working. something wrong when trying to commit\" />\r\n    <MESSAGE value=\"onSearchSelected search for ISBN and Author\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"onSearchSelected search for ISBN and Author\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5284f5daa0d16b8f69386259c39823ac716f683b)
+++ b/.idea/workspace.xml	(date 1705252783631)
@@ -4,7 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="9d7239cd-08d7-4e6b-8966-b7b7055103ea" name="Changes" comment="onSearchSelected search for ISBN and Author">
+    <list default="true" id="9d7239cd-08d7-4e6b-8966-b7b7055103ea" name="Changes" comment="added deleteBook-method">
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/SearchMode.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/SearchMode.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/BooksPaneView.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/Controller.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -333,7 +337,15 @@
       <option name="project" value="LOCAL" />
       <updated>1705243582804</updated>
     </task>
-    <option name="localTasksCounter" value="23" />
+    <task id="LOCAL-00023" summary="added deleteBook-method">
+      <option name="closed" value="true" />
+      <created>1705252019069</created>
+      <option name="number" value="00023" />
+      <option name="presentableId" value="LOCAL-00023" />
+      <option name="project" value="LOCAL" />
+      <updated>1705252019069</updated>
+    </task>
+    <option name="localTasksCounter" value="24" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -371,7 +383,8 @@
     <MESSAGE value="addBook, trying to get currentBookID och currentAuthorID" />
     <MESSAGE value="addbook still not working. something wrong when trying to commit" />
     <MESSAGE value="onSearchSelected search for ISBN and Author" />
-    <option name="LAST_COMMIT_MESSAGE" value="onSearchSelected search for ISBN and Author" />
+    <MESSAGE value="added deleteBook-method" />
+    <option name="LAST_COMMIT_MESSAGE" value="added deleteBook-method" />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
