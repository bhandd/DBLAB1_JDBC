Index: src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage dblab1.dblab1_jdbc.model;\r\n\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Author;\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Grade;\r\nimport dblab1.dblab1_jdbc.model.exceptions.BooksDbException;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * A mock implementation of the BooksDBInterface interface to demonstrate how to\r\n * use it together with the user interface.\r\n * <p>\r\n * Your implementation must access a real database.\r\n *\r\n * @author anderslm@kth.se\r\n */\r\npublic class BooksDb implements BooksDbInterface {\r\n\r\n    private final List<Book> books;\r\n\r\n\r\n//\r\n    public BooksDb() {\r\n      //  books = Arrays.asList(DATA); //TODO: ska troligtvis ta bort DATA\r\n        books = List.of();\r\n    }\r\n\r\n    @Override\r\n    public boolean connect() throws Exception {\r\n        if (getConnection.StartConnection()) {\r\n            System.out.println(\"Yes\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"No\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static Connection shareConnection() {\r\n        try{\r\n            return getConnection.getConnection();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void disconnect() throws BooksDbException, SQLException {\r\n        getConnection.EndConnection();\r\n    }\r\n//TODO: sparas ifall den behövs sen.\r\n\r\n\r\n    //Added by Anders\r\n//    @Override\r\n//    public List<Book> searchBooksByTitle(String searchTitle)\r\n//            throws BooksDbException {\r\n//        // mock implementation\r\n//        // NB! Your implementation should select the books matching\r\n//        // the search string via a query to a database (not load all books from db)\r\n//        List<Book> result = new ArrayList<>();\r\n//        searchTitle = searchTitle.toLowerCase();\r\n//        for (Book book : books) {\r\n//            if (book.getTitle().toLowerCase().contains(searchTitle)) {\r\n//                result.add(book);\r\n//            }\r\n//        }\r\n//        //spara i books<-SQL-fråga till databas\r\n//      //  result.add(books);\r\n//        return result;\r\n//    }\r\n\r\n    //TODO: Connection probably not needed as a parameter. Should be able to implement the search method here.\r\n\r\n    public static void executeQuery(/*java.sql.Connection con,*/ String query, List<Book> books) throws SQLException {\r\n\r\n        Connection con = getConnection.getConnection();\r\n        try (Statement stmt = con.createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n\r\n            // Get the attribute names\r\n            ResultSetMetaData metaData = rs.getMetaData();\r\n            int ccount = metaData.getColumnCount();\r\n            for (int c = 1; c <= ccount; c++) {\r\n                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n            }\r\n            System.out.println();\r\n\r\n            // Get the attribute values\r\n            while (rs.next()) {\r\n\r\n                int bookId = rs.getInt(\"book_id\");\r\n                String ISBN = rs.getString(\"ISBN\");\r\n                String title = rs.getString(\"title\");\r\n/*\r\n                Author author = new Author();\r\n                author.setfName(rs.getString(\"author\"));\r\n*/\r\n                String author = rs.getString(\"Author\");\r\n                //String author = rs.getString(\"author\");\r\n                Date published = rs.getDate(\"published\");\r\n                //   int pages = rs.getInt(\"pages\");\r\n                //  String language = rs.getString(\"language\");\r\n                int genre_id = rs.getInt(\"genre_id\");\r\n                int grade = rs.getInt(\"grade\");\r\n                Book book = new Book(bookId, ISBN, title,author, published, genre_id, grade);\r\n                System.out.println(book.toString());\r\n                books.add(book);\r\n\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    public static List<Book> searchDBBook(String query) {\r\n        List<Book> result = new ArrayList<>();\r\n\r\n        Connection con = getConnection.getConnection();\r\n        try (Statement stmt = con.createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n            while (rs.next()) {\r\n\r\n                int bookId = rs.getInt(\"book_id\");\r\n                String ISBN = rs.getString(\"ISBN\");\r\n                String title = rs.getString(\"title\");\r\n/*\r\n                Author author = new Author();\r\n                author.setfName(rs.getString(\"author\"));\r\n*/\r\n                String author = rs.getString(\"Author\");\r\n                //String author = rs.getString(\"author\");\r\n                Date published = rs.getDate(\"published\");\r\n                //   int pages = rs.getInt(\"pages\");\r\n                //  String language = rs.getString(\"language\");\r\n                int genre_id = rs.getInt(\"genre_id\");\r\n                int grade = rs.getInt(\"grade\");\r\n                Book book = new Book(bookId, ISBN, title,author, published, genre_id, grade);\r\n                System.out.println(book.toString());\r\n                result.add(book);\r\n                System.out.println(book.toString());\r\n                System.out.println(\"Yes\");\r\n                // } else System.out.println(\"No\");\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //TODO: antingen skriver man grade istället för column eller så skriver man\r\n    // om metoden så man kan användan den för att komma åt valfri kolumn\r\n    public static void setGrade(String gradeValue, String title){\r\n        //TODO:try to make methods to retrieve the connection and the books\r\n\r\n       // Connection con = getConnection.getConnection();\r\n        List<Book> books = new ArrayList<>();\r\n\r\n        try(Connection con = getConnection.getConnection()) {\r\n            //  getConnection.executeQuery(con, \"SELECT * FROM T_book\", books);\r\n          executeStatement(\"UPDATE T_book SET Grade= \"+ gradeValue + \"WHERE title = \" + \"'\"+title+\"'\");\r\n            // getConnection.searchBookDB(\"SELECT * FROM T_book\"); //TODO: investigate if this is possible in some way\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"something went wrong\");\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void executeStatement(String statement) throws SQLException {\r\n            Connection con = getConnection.getConnection();\r\n\r\n\r\n\r\n        try (Statement stmt = con.createStatement()) {\r\n            // Execute the SQL statement\r\n            int n = stmt.executeUpdate(statement);\r\n\r\n         //   ResultSet rs = stmt.executeQuery(statement);\r\n\r\n            // Get the attribute names\r\n//            ResultSetMetaData metaData = rs.getMetaData();\r\n//            int ccount = metaData.getColumnCount();\r\n//            for (int c = 1; c <= ccount; c++) {\r\n//                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n//            }\r\n//            System.out.println();\r\n////TODO: move the while loop in executeQuery, searchBookDB and this one to it´s own method\r\n//            // Get the attribute values\r\n//            while (rs.next()) {\r\n//\r\n//                int bookId = rs.getInt(\"book_id\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                String title = rs.getString(\"title\");\r\n///*\r\n//                Author author = new Author();\r\n//                author.setfName(rs.getString(\"author\"));\r\n//*/\r\n//                String author = rs.getString(\"Author\");\r\n//                //String author = rs.getString(\"author\");\r\n//                Date published = rs.getDate(\"year\");\r\n//                //   int pages = rs.getInt(\"pages\");\r\n//                //  String language = rs.getString(\"language\");\r\n//                int genre_id = rs.getInt(\"genre_id\");\r\n//                int grade = rs.getInt(\"grade\");\r\n//                Book book = new Book(bookId, ISBN, title,author, published, genre_id, grade);\r\n//                System.out.println(book.toString());\r\n              //  books.add(book);\r\n\r\n          //  }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n\r\n\r\n    //TODO: kolla om vi ska ha en lista av böcker eller ett bokobjekt i taget\r\n    public List<Book> searchBooks(String title, String isbn, String author, int rating, String genre){\r\n        //TODO: make SQL-queries depending on different search criteria\r\n        return null;\r\n\r\n    }\r\n    public void rateBook(int bookId, int rating) throws Exception{\r\n        //TODO: rate a book in the database\r\n    }\r\n\r\n    public void addBook(String title, String isbn, List<String> authors, String genre) throws Exception{\r\n        //TODO:  add a book to the database forst without author\r\n        // add a book to the database WITH authro(Do this one last(but before addAuthor) as it accesses about 4 tables in the database and therefore is more complicated)\r\n    }\r\n\r\n    public void addAuthor(String name) throws Exception{\r\n        //TODO: add an author to the database and at the same time update the book_author table to connect the author to the books and vice versa\r\n    }\r\n\r\n//    private static final Book[] DATA = {\r\n//            new Book(1, \"123456789\", \"Databases Illuminated\", 2018),//new Date(2018, 1, 1)),\r\n//            new Book(2, \"234567891\", \"Dark Databases\", 1990), //new Date(1990, 1, 1)),\r\n//            new Book(3, \"456789012\", \"The buried giant\", 2000), //new Date(2000, 1, 1)),\r\n//            new Book(4, \"567890123\", \"Never let me go\", 2000), //new Date(2000, 1, 1)),\r\n//            new Book(5, \"678901234\", \"The remains of the day\", 2000), //new Date(2000, 1, 1)),\r\n//            new Book(6, \"234567890\", \"Alias Grace\", 2000), //new Date(2000, 1, 1)),\r\n//            new Book(7, \"345678911\", \"The handmaids tale\", 2010), //new Date(2010, 1, 1)),\r\n//            new Book(8, \"345678901\", \"Shuggie Bain\", 2020), //new Date(2020, 1, 1)),\r\n//            new Book(9, \"345678912\", \"Microserfs\", 2000) //new Date(2000, 1, 1)),\r\n//    };\r\n\r\n\r\n    /**\r\n     * Updates the grade for a book with the specified title.\r\n     *\r\n     * @param grade The new grade for the book.\r\n     * @param title The title of the book to update.\r\n     */\r\n    public static void updateGrade(int grade, String title) {\r\n        var sql = \"UPDATE T_book \"\r\n                + \"SET grade = ? \"\r\n                + \"WHERE title = ?\";\r\n\r\n        try (var conn = getConnection.getConnection();\r\n             var stmt = conn.prepareStatement(sql)) {\r\n\r\n            // prepare data for update\r\n//            stmt.setString(1, title);\r\n//            stmt.setInt(2, grade);\r\n            stmt.setString(2, title);\r\n            stmt.setInt(1, grade);\r\n\r\n            // execute the update\r\n            int rowAffected = stmt.executeUpdate();\r\n            System.out.println(\"Row affected \" + rowAffected);\r\n        } catch (SQLException ex) {\r\n            System.err.println(ex.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     *\r\n     * */\r\n    public static void addBookToDb(String isbn, String title,String author) {\r\n        var sql = \"INSERT INTO T_book (isbn, title, author ) VALUES (?, ?, ?)\"; //no author\r\n\r\n   try (var conn = getConnection.getConnection();\r\n             var stmt = conn.prepareStatement(sql)) {\r\n\r\n            // prepare data for update\r\n\r\n            stmt.setString(1, isbn);\r\n            stmt.setString(2, title);\r\n              //  stmt.setString(3,genreID);\r\n            stmt.setString(3, author); // with author as string\r\n\r\n\r\n            //TODO: lägg till metoder :\r\n            //checkIfAuthorExists();\r\n          //  addAuthorInDB();\r\n         //   updateBookAuthorInDB;\r\n\r\n            // execute the update\r\n            int rowAffected = stmt.executeUpdate();\r\n            System.out.println(\"Row affected \" + rowAffected);\r\n        } catch (SQLException ex) {\r\n            System.err.println(ex.getMessage());\r\n        }\r\n    }\r\n\r\n    /**används för att kolla om en author existerar i T_book\r\n     * används av metoden addBookToDB\r\n     *\r\n     *\r\n     * */\r\npublic static boolean checkIfAuthorExists(String author){\r\n        //TODO: använd en author här istället för en String?\r\n    String query = \"SELECT COUNT(*) FROM T_book WHERE author ='\" + author + \"'\";\r\n    Connection con = getConnection.getConnection();\r\n    try (Statement stmt = con.createStatement()) {\r\n        // Execute the SQL statement\r\n        ResultSet rs = stmt.executeQuery(query);\r\n        rs.next();\r\n        int count = rs.getInt(1);\r\n        if (count > 0){\r\n            System.out.println(author + \" exists in DB!\");\r\n            return true;\r\n        }\r\n    } catch (SQLException e) {\r\n        System.err.println(e.getMessage());\r\n    }\r\n   System.out.println(author + \" does not exist in DB!\");\r\n    return false;\r\n}\r\n\r\n\r\n//TODO: spara tills vidare, försök att använda ett preparedStatement,\r\n// vilket ska förhindra SQL-injection\r\n    public static boolean checkIfAuthorExist(String author) {\r\n        var sql = \"SELECT * FROM T_book WHERE author = ?\";\r\n\r\n\r\n            // prepare data for update\r\n//            stmt.setString(1, title);\r\n//            stmt.setInt(2, grade);\r\n\r\n        try (var con = getConnection.getConnection();\r\n             var stmt = con.prepareStatement(sql)) {\r\n            stmt.setString(1, author);\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(sql);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count > 0){\r\n                System.out.println(author + \" exists in DB!\");\r\n                return true;\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n        System.out.println(author + \" does not exist in DB!\");\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java b/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java
--- a/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java	(revision 6cd5a1057e727fdbcf04c959cb2dc5d5c11019e4)
+++ b/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java	(date 1705009197346)
@@ -109,7 +109,7 @@
 */
                 String author = rs.getString("Author");
                 //String author = rs.getString("author");
-                Date published = rs.getDate("published");
+                Date published = rs.getDate("year");
                 //   int pages = rs.getInt("pages");
                 //  String language = rs.getString("language");
                 int genre_id = rs.getInt("genre_id");
@@ -141,7 +141,7 @@
 */
                 String author = rs.getString("Author");
                 //String author = rs.getString("author");
-                Date published = rs.getDate("published");
+                Date published = rs.getDate("year");
                 //   int pages = rs.getInt("pages");
                 //  String language = rs.getString("language");
                 int genre_id = rs.getInt("genre_id");
Index: src/main/java/dblab1/dblab1_jdbc/model/getConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.model;\r\n\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Author;\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n//TODO: should this be accessed trough the BooksDbInterface?\r\npublic class getConnection {\r\n\r\n    private static Connection con = null;\r\n    public static boolean StartConnection() throws Exception {\r\n\r\n        String user = (\"root\");//args[0]; // user name\r\n        String pwd = (\"1234\");//args[1]; // password\r\n        System.out.println(user + \", *********\");\r\n        String database = \"Library\"; // the name of the specific database\r\n        String server\r\n                = \"jdbc:mysql://localhost:3306/\" + database\r\n                + \"?UseClientEnc=UTF8\";\r\n        try (Connection checkConnect = DriverManager.getConnection(server, user, pwd)){\r\n            con = DriverManager.getConnection(server, user, pwd);\r\n            //Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n            System.out.println(\"Connected!\");\r\n            return true;\r\n            //executeQuery(con, \"SELECT * FROM T_book\");\r\n        }  catch (SQLException e) {\r\n            System.err.println(\"Connection failed. Error message: \" + e.getMessage());\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static void EndConnection() throws SQLException {\r\n        con.close();\r\n        System.out.println(\"Connection closed.\");\r\n    }\r\n\r\n    //TODO: Remove later\r\n    //\r\n\r\n//    public static void executeQuery(java.sql.Connection con, String query, List<Book> books) throws SQLException {\r\n//\r\n//        try (Statement stmt = con.createStatement()) {\r\n//            // Execute the SQL statement\r\n//            ResultSet rs = stmt.executeQuery(query);\r\n//\r\n//            // Get the attribute names\r\n//            ResultSetMetaData metaData = rs.getMetaData();\r\n//            int ccount = metaData.getColumnCount();\r\n//            for (int c = 1; c <= ccount; c++) {\r\n//                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n//            }\r\n//            System.out.println();\r\n//\r\n//            // Get the attribute values\r\n//            while (rs.next()) {\r\n//              //  int bookId = rs.getInt(\"book_id\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                String title = rs.getString(\"title\");\r\n//                /*\r\n//                Author author = new Author();\r\n//                author.setfName(rs.getString(\"author\"));\r\n//                */\r\n////                int year = rs.getInt(\"year\");\r\n////                int grade = rs.getInt(\"grade\");\r\n////                int pages = rs.getInt(\"pages\");\r\n//               // String language = rs.getString(\"language\");\r\n////                int genreId = rs.getInt(\"genre id\");\r\n//\r\n//                Book book = new Book(/*bookId,*/ ISBN, title);\r\n//                books.add(book);\r\n//            }\r\n//            System.out.println();\r\n//        }\r\n//    }\r\n\r\n    //TODO: Remove later\r\n\r\n//    public static List<Book> searchBookDB( String query) {\r\n//        List<Book> result = new ArrayList<>();\r\n//\r\n//        Connection con = getConnection.getConnection();\r\n//        try (Statement stmt = con.createStatement()) {\r\n//            // Execute the SQL statement\r\n//            ResultSet rs = stmt.executeQuery(query);\r\n//            while (rs.next()) {\r\n//                //  int bookId = rs.getInt(\"book_id\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                String title = rs.getString(\"title\");\r\n//                /*\r\n//                Author author = new Author();\r\n//                author.setfName(rs.getString(\"author\"));\r\n//                */\r\n////                int year = rs.getInt(\"year\");\r\n////                int grade = rs.getInt(\"grade\");\r\n////                int pages = rs.getInt(\"pages\");\r\n//                // String language = rs.getString(\"language\");\r\n////                int genreId = rs.getInt(\"genre id\");\r\n//                int yearDB = rs.getInt(\"year\");\r\n//\r\n//\r\n////                titleDB = titleDB.toLowerCase();\r\n////                if (titleDB.toLowerCase().contains(title)) {\r\n//                Book book = new Book(/*bookId,*/ ISBN, title); result.add(book);\r\n//                System.out.println(\"Yes\");\r\n//                // } else System.out.println(\"No\");\r\n//            }\r\n//        } catch (SQLException e) {\r\n//            throw new RuntimeException(e);\r\n//        }\r\n//        return result;\r\n//    }\r\n\r\n\r\n    //TODO: Temporary copy of searchBookDb, delete if not needed\r\n/*\r\n    public static List<Book> searchBookDB( String query) {\r\n        List<Book> result = new ArrayList<>();\r\n\r\n        Connection con = getConnection.getConnection();\r\n        try (Statement stmt = con.createStatement()) {\r\n            // Execute the SQL statement\r\n            ResultSet rs = stmt.executeQuery(query);\r\n            while (rs.next()) {\r\n                int bookIdDB = rs.getInt(\"book_id\");\r\n                String titleDB = rs.getString(\"title\");\r\n                Author authorDB = new Author();\r\n                authorDB.setfName(rs.getString(\"author\"));\r\n                String ISBNDB = rs.getString(\"ISBN\");\r\n                int yearDB = rs.getInt(\"year\");\r\n\r\n//                titleDB = titleDB.toLowerCase();\r\n//                if (titleDB.toLowerCase().contains(title)) {\r\n                Book book = new Book(bookIdDB, ISBNDB, titleDB, authorDB, yearDB);\r\n                result.add(book);\r\n                System.out.println(\"Yes\");\r\n                // } else System.out.println(\"No\");\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return result;\r\n    }\r\n\r\n */\r\n    public static Connection getConnection() {\r\n        return con;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java b/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java
--- a/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java	(revision 6cd5a1057e727fdbcf04c959cb2dc5d5c11019e4)
+++ b/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java	(date 1705008163237)
@@ -13,8 +13,8 @@
     private static Connection con = null;
     public static boolean StartConnection() throws Exception {
 
-        String user = ("root");//args[0]; // user name
-        String pwd = ("1234");//args[1]; // password
+        String user = ("app_user");//args[0]; // user name
+        String pwd = ("spion");//args[1]; // password
         System.out.println(user + ", *********");
         String database = "Library"; // the name of the specific database
         String server
Index: src/main/java/dblab1/dblab1_jdbc/view/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dblab1.dblab1_jdbc.view;\r\n\r\n//import se.kth.anderslm.booksdb.model.Book;\r\n//import se.kth.anderslm.booksdb.model.BooksDbInterface;\r\n//import se.kth.anderslm.booksdb.model.SearchMode;\r\n\r\nimport dblab1.dblab1_jdbc.model.*;\r\nimport dblab1.dblab1_jdbc.model.entityClasses.Book;\r\nimport dblab1.dblab1_jdbc.model.exceptions.BooksDbException;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TextInputDialog;\r\nimport javafx.scene.layout.GridPane;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport static javafx.scene.control.Alert.AlertType.*;\r\n\r\n/**\r\n * The controller is responsible for handling user requests and update the view\r\n * (and in some cases the model).\r\n *\r\n * @author anderslm@kth.se\r\n */\r\npublic class Controller {\r\n\r\n    private BooksPaneView booksView; // view\r\n    private BooksDbInterface booksDb; // model\r\n\r\n    public Controller(BooksDbInterface booksDb, BooksPaneView booksView) {\r\n        this.booksDb = booksDb;\r\n        this.booksView = booksView;\r\n    }\r\n\r\n    protected void onSearchSelected(String searchFor, SearchMode mode) {\r\n        try {\r\n            if (searchFor != null && searchFor.length() > 1) {\r\n                List<Book> result = new ArrayList<>();\r\n                switch (mode) {\r\n                    case Title:\r\n\r\n                        // result = booksDb.searchBooksByTitleDB(searchFor);\r\n                        result = BooksDb.searchDBBook(\"SELECT * FROM T_book WHERE title LIKE'%\" + searchFor + \"%'\");\r\n\r\n                        break;\r\n                    case ISBN:\r\n                        result = BooksDb.searchDBBook(\"SELECT * FROM T_book WHERE isbn LIKE'%\" + searchFor + \"%'\");\r\n\r\n                        break;\r\n                    case Author:\r\n                        result = BooksDb.searchDBBook(\"SELECT * FROM T_book WHERE author LIKE'%\" + searchFor + \"%'\");\r\n\r\n                        break;\r\n                    default:\r\n                        result = new ArrayList<>();\r\n                }\r\n                if (result == null || result.isEmpty()) {\r\n                    booksView.showAlertAndWait(\r\n                            \"No results found.\", INFORMATION);\r\n                } else {\r\n                    booksView.displayBooks(result);\r\n                }\r\n            } else {\r\n                booksView.showAlertAndWait(\r\n                        \"Enter a search string!\", WARNING);\r\n            }\r\n        } catch (Exception e) {\r\n            booksView.showAlertAndWait(\"Database error.\", ERROR);\r\n        }\r\n    }\r\n\r\n\r\n    public EventHandler<ActionEvent> connectHandler = new EventHandler<ActionEvent>() {\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            BooksDbInterface booksDbInterface = new BooksDb();\r\n            try {\r\n                booksDbInterface.connect();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    };\r\n\r\n//TODO: commented out for now. Already in getConnection. Should probably be moved to BooksDb\r\n\r\n//    public static void executeQuery(java.sql.Connection con, String query, List<Book> books) throws SQLException {\r\n//\r\n//        try (Statement stmt = con.createStatement()) {\r\n//            // Execute the SQL statement\r\n//            ResultSet rs = stmt.executeQuery(query);\r\n//\r\n//            // Get the attribute names\r\n//            ResultSetMetaData metaData = rs.getMetaData();\r\n//            int ccount = metaData.getColumnCount();\r\n//            for (int c = 1; c <= ccount; c++) {\r\n//                System.out.print(metaData.getColumnName(c) + \"\\t\");\r\n//            }\r\n//            System.out.println();\r\n//\r\n//            // Get the attribute values\r\n//            while (rs.next()) {\r\n//                int bookId = rs.getInt(\"book_id\");\r\n//                String title = rs.getString(\"title\");\r\n//                String author = rs.getString(\"author\");\r\n//                String ISBN = rs.getString(\"ISBN\");\r\n//                int year = rs.getInt(\"year\");\r\n//\r\n//                Book book = new Book(bookId, ISBN, title, year);\r\n//                books.add(book);\r\n//            }\r\n//            System.out.println();\r\n//        }\r\n//    }\r\n\r\n    public EventHandler<ActionEvent> showBooksInDB = new EventHandler<ActionEvent>() {\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            //TODO:try to make methods to retrieve the connection and the books\r\n\r\n           // Connection con = getConnection.getConnection();\r\n            List<Book> books = new ArrayList<>();\r\n\r\n            try(Connection con = BooksDb.shareConnection()) {\r\n                //  getConnection.executeQuery(con, \"SELECT * FROM T_book\", books);\r\n                BooksDb.executeQuery(/*con,*/ \"SELECT * FROM T_book\", books);\r\n                // getConnection.searchBookDB(\"SELECT * FROM T_book\"); //TODO: investigate if this is possible in some way\r\n//                BooksDb.checkIfAuthorExists(\"Johan Larsson\");\r\n                booksView.displayBooks(books);\r\n\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    };\r\n\r\n    public EventHandler<ActionEvent> addBookDB = new EventHandler<ActionEvent>() {\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            //TODO:try to make methods to retrieve the connection and the books\r\n\r\n            // Connection con = getConnection.getConnection();\r\n            List<Book> books = new ArrayList<>();\r\n\r\n            try(Connection con = BooksDb.shareConnection()) {\r\n                //  getConnection.executeQuery(con, \"SELECT * FROM T_book\", books);\r\n                //   BooksDb.executeQuery(/*con,*/ \"SELECT * FROM T_book\", books);\r\n                // getConnection.searchBookDB(\"SELECT * FROM T_book\"); //TODO: investigate if this is possible in some way\r\n          //      BooksDb.checkIfAuthorExists(\"Johan Larss\");\r\n                //   booksView.displayBooks(books);\r\n                BooksDb.addBookToDb(\"9471324819234\", \"killen som hade en liten\", \"Fem Isex\");\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Todo. Can be deleted\r\n    /*public EventHandler<ActionEvent> updateBookDB1test = new EventHandler<ActionEvent>() {\r\n       // String gradeValue = \"2\";\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        String gradeValue = null;\r\n        String title = \"mattebok\";\r\n\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n        //    BooksDb.setGrade(gradeValue, title);\r\n            TextInputDialog dialog = new TextInputDialog();\r\n            dialog.setTitle(\"Two Input Alert\");\r\n            dialog.setHeaderText(\"Enter your details:\");\r\n\r\n            // Set up the first input field\r\n            dialog.getDialogPane().setContentText(\"Title:\");\r\n            dialog.getEditor().setPromptText(\"Enter the name of book\");\r\n\r\n            // Add a second input field\r\n            TextInputDialog anotherDialog = new TextInputDialog();\r\n            anotherDialog.setTitle(\"Two Input Alert\");\r\n            anotherDialog.setHeaderText(\"Enter your details:\");\r\n            anotherDialog.getDialogPane().setContentText(\"Grade:\");\r\n            anotherDialog.getEditor().setPromptText(\"Enter new grade\");\r\n            Optional<String> resultName = dialog.showAndWait();\r\n            if (resultName.isPresent()) {\r\n                // If the first input is provided, show the second dialog\r\n                Optional<String> resultAge = anotherDialog.showAndWait();\r\n\r\n                // Check if the second input is provided\r\n                if (resultAge.isPresent()) {\r\n                    // Process the user's inputs\r\n                    String title = resultName.get();\r\n                    gradeValue = resultAge.get();\r\n                    BooksDb.updateGrade(Integer.parseInt(gradeValue), String.valueOf(title));\r\n                    // Display the results or perform further actions\r\n                } else {\r\n                    // User canceled the second input\r\n                    System.out.println(\"Operation canceled by the user.\");\r\n                }\r\n            } else {\r\n                // User canceled the first input\r\n                System.out.println(\"Operation canceled by the user.\");\r\n            }\r\n\r\n        }\r\n\r\n            //  booksView.displayBooks(books);\r\n\r\n    };*/\r\n\r\n    public EventHandler<ActionEvent> updateBookDB = new EventHandler<ActionEvent>() {\r\n        // String gradeValue = \"2\";\r\n        Alert alert = new Alert(CONFIRMATION);\r\n        String gradeValue = null;\r\n        String title = \"mattebok\";\r\n\r\n        private TextField titleField = new TextField();\r\n        private TextField gradeField = new TextField();\r\n\r\n        @Override\r\n        public void handle(ActionEvent actionEvent) {\r\n            alert.setTitle(\"Set new grade\");\r\n            alert.setResizable(false);\r\n\r\n            GridPane grid = new GridPane();\r\n            grid.setAlignment(Pos.CENTER);\r\n            grid.setHgap(5);\r\n            grid.setVgap(5);\r\n            grid.setPadding(new Insets(10, 10, 10, 10));\r\n            grid.add(new Label(\"Title for book \"), 1, 1);\r\n            grid.add(titleField, 2, 1);\r\n            grid.add(new Label(\"New grade \"), 1, 2);\r\n            grid.add(gradeField, 2, 2);\r\n\r\n            alert.getDialogPane().setContent(grid);\r\n            alert.showAndWait();\r\n            title = titleField.getText();\r\n            gradeValue = gradeField.getText();\r\n\r\n            BooksDb.updateGrade(Integer.parseInt(gradeValue), String.valueOf(title));\r\n\r\n            titleField.setText(\"\");\r\n            gradeField.setText(\"\");\r\n        }\r\n    };\r\n\r\n        //TODO. Can be deleted\r\n//    public EventHandler<ActionEvent> searchDB = new EventHandler<ActionEvent>() {\r\n//        @Override\r\n//        public void handle(ActionEvent actionEvent) {\r\n//            Connection con = getConnection.getConnection();\r\n//            List<Book> books = new ArrayList<>();\r\n//            try {\r\n//                getConnection.executeQuery(con, \"SELECT * FROM T_book\", books);\r\n//                getConnection.executeQuery(con, \"SELECT * FROM T_book\", books);\r\n//                booksView.displayBooks(books);\r\n//\r\n//            } catch (SQLException e) {\r\n//                throw new RuntimeException(e);\r\n//            }\r\n//        }\r\n        //   };\r\n\r\n        public EventHandler<ActionEvent> endConnectHandler = new EventHandler<ActionEvent>() {\r\n            @Override\r\n            public void handle(ActionEvent actionEvent) {\r\n                BooksDbInterface booksDbInterface = new BooksDb();\r\n                try {\r\n                    booksDbInterface.disconnect();\r\n                } catch (SQLException | BooksDbException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n        };\r\n        // TODO:\r\n        // Add methods for all types of user interaction (e.g. via  menus).\r\n    }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dblab1/dblab1_jdbc/view/Controller.java b/src/main/java/dblab1/dblab1_jdbc/view/Controller.java
--- a/src/main/java/dblab1/dblab1_jdbc/view/Controller.java	(revision 6cd5a1057e727fdbcf04c959cb2dc5d5c11019e4)
+++ b/src/main/java/dblab1/dblab1_jdbc/view/Controller.java	(date 1705008330984)
@@ -156,7 +156,7 @@
                 // getConnection.searchBookDB("SELECT * FROM T_book"); //TODO: investigate if this is possible in some way
           //      BooksDb.checkIfAuthorExists("Johan Larss");
                 //   booksView.displayBooks(books);
-                BooksDb.addBookToDb("9471324819234", "killen som hade en liten", "Fem Isex");
+               // BooksDb.addBookToDb("9471324819234", "killen som hade en liten", "Fem Isex");
             } catch (SQLException e) {
                 throw new RuntimeException(e);
             }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9d7239cd-08d7-4e6b-8966-b7b7055103ea\" name=\"Changes\" comment=\"Added alert to Set new grade\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaFXApplication\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"Enum\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"alternativeSearchMethod\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2a5YJOLu3Yi0gFNB5YN81gmPA5j\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;attempted-executeQuery-update&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Datalab_driver/mysql-connector-j-8.2.0/mysql-connector-j-8.2.0.jar&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;mysql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\år 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\view\" />\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\år 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\model\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\bjorn\\Desktop\\Studier\\Datateknik\\år 2\\HI1027 Objektorienterad programmering\\ideaProjects\\DBLab1_JDBC\\src\\main\\java\\dblab1\\dblab1_jdbc\\model\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"dblab1.dblab1_jdbc.view\" />\r\n      <recent name=\"dblab1.dblab1_jdbc.model.entityClasses\" />\r\n      <recent name=\"dblab1.dblab1_jdbc.model.exceptions\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"DialogExampleMain\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.model.Dialog.DialogExampleMain\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.model.exceptions.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"JDBCTest\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.model.JDBCTest\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"app_user spion\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.model.exceptions.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dblab1.dblab1_jdbc.Main\" />\r\n      <module name=\"DBLab1_JDBC\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"app_user spion\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dblab1.dblab1_jdbc.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.DialogExampleMain\" />\r\n        <item itemvalue=\"Application.JDBCTest\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.JDBCTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9d7239cd-08d7-4e6b-8966-b7b7055103ea\" name=\"Changes\" comment=\"\" />\r\n      <created>1703609834744</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1703609834744</updated>\r\n      <workItem from=\"1704028395929\" duration=\"12000\" />\r\n      <workItem from=\"1704028435708\" duration=\"31000\" />\r\n      <workItem from=\"1704028478658\" duration=\"21000\" />\r\n      <workItem from=\"1704029608039\" duration=\"152000\" />\r\n      <workItem from=\"1704050590694\" duration=\"21000\" />\r\n      <workItem from=\"1704278936904\" duration=\"646000\" />\r\n      <workItem from=\"1704405707457\" duration=\"3000\" />\r\n      <workItem from=\"1704411538506\" duration=\"6058000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"uppladdning av projekt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703610552121</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703610552121</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"JDBC driver\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703671224594</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703671224594</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Updated with GUI from AndersLm\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703675116944</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703675116944</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"added packages. Added classes; Author, review. changed name of BooksDbMockImpl to BooksDb\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704526212217</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704526212217</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"search method version2\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704612357857</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704612357857</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Search for title, ISBN and author\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704612971433</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704612971433</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"added arraylist authors in Book\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704618876131</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704618876131</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Search method updated, (skipped the searchBooksByTitle--method in BooksDb),and working but get error messages. Maybe something with the connection. need to update the view methods for the book to display more book-info.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704704677582</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704704677582</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"moved executeQuery and searchBookDB-methods from getConnection to BooksDb. The methods are commented out in getConnection\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704793290044</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704793290044</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Author implemented in view, search for author possible. Author changed to a String -&gt; 1 book - 1 Author\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704886470985</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704886470985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"method updateGrade created. But needs a dialogue-view. Values can be modified in eventhandler Controller.updateBookDB. uses the prepareStatement-method from the java Connection-class\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704964755331</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704964755331</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"addBookToDB and checkIfAuthorExists added. No Dialog implemented yet. test checkIfAuthorExists with add in the menu\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704996818125</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704996818125</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Added alert to Set new grade\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705007837302</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705007837302</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"14\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"uppladdning av projekt\" />\r\n    <MESSAGE value=\"JDBC driver\" />\r\n    <MESSAGE value=\"Updated with GUI from AndersLm\" />\r\n    <MESSAGE value=\"added packages. Added classes; Author, review. changed name of BooksDbMockImpl to BooksDb\" />\r\n    <MESSAGE value=\"search method version2\" />\r\n    <MESSAGE value=\"Search for title, ISBN and author\" />\r\n    <MESSAGE value=\"added arraylist authors in Book\" />\r\n    <MESSAGE value=\"Search method updated, (skipped the searchBooksByTitle--method in BooksDb),and working but get error messages. Maybe something with the connection. need to update the view methods for the book to display more book-info.\" />\r\n    <MESSAGE value=\"moved executeQuery and searchBookDB-methods from getConnection to BooksDb. The methods are commented out in getConnection\" />\r\n    <MESSAGE value=\"Author implemented in view, search for author possible. Author changed to a String -&gt; 1 book - 1 Author\" />\r\n    <MESSAGE value=\"method updateGrade created. But needs a dialogue-view. Values can be modified in eventhandler Controller.updateBookDB. uses the prepareStatement-method from the java Connection-class\" />\r\n    <MESSAGE value=\"addBookToDB and checkIfAuthorExists added. No Dialog implemented yet. test checkIfAuthorExists with add in the menu\" />\r\n    <MESSAGE value=\"Added alert to Set new grade\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added alert to Set new grade\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6cd5a1057e727fdbcf04c959cb2dc5d5c11019e4)
+++ b/.idea/workspace.xml	(date 1705009562633)
@@ -4,7 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="9d7239cd-08d7-4e6b-8966-b7b7055103ea" name="Changes" comment="Added alert to Set new grade" />
+    <list default="true" id="9d7239cd-08d7-4e6b-8966-b7b7055103ea" name="Changes" comment="Added alert to Set new grade">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/BooksDb.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/model/getConnection.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/dblab1/dblab1_jdbc/view/Controller.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -27,7 +32,6 @@
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
     <option name="RESET_MODE" value="HARD" />
-    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="MavenImportPreferences">
     <option name="generalSettings">
